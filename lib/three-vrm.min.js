/*! (c) 2019-2021 pixiv Inc. - https://github.com/pixiv/three-vrm/blob/release/LICENSE */
!function(e,t){"object"==typeof exports&&"undefined"!=typeof module?t(exports,require("three")):"function"==typeof define&&define.amd?define(["exports","three"],t):t((e="undefined"!=typeof globalThis?globalThis:e||self).THREE_VRM={},e.THREE)}(this,(function(e,t){"use strict";function r(e){if(e&&e.__esModule)return e;var t=Object.create(null);return e&&Object.keys(e).forEach((function(r){if("default"!==r){var i=Object.getOwnPropertyDescriptor(e,r);Object.defineProperty(t,r,i.get?i:{enumerable:!0,get:function(){return e[r]}})}})),t.default=e,Object.freeze(t)}var i=r(t);
/*!
     * @pixiv/three-vrm-core v1.0.0-beta.19
     * The implementation of core features of VRM, for @pixiv/three-vrm
     *
     * Copyright (c) 2020-2021 pixiv Inc.
     * @pixiv/three-vrm-core is distributed under MIT License
     * https://github.com/pixiv/three-vrm/blob/release/LICENSE
     */class n extends i.Object3D{constructor(e){super(),this.weight=0,this.isBinary=!1,this.overrideBlink="none",this.overrideLookAt="none",this.overrideMouth="none",this._binds=[],this.name=`VRMExpression_${e}`,this.expressionName=e,this.type="VRMExpression",this.visible=!1}get overrideBlinkAmount(){return"block"===this.overrideBlink?0<this.weight?1:0:"blend"===this.overrideBlink?this.weight:0}get overrideLookAtAmount(){return"block"===this.overrideLookAt?0<this.weight?1:0:"blend"===this.overrideLookAt?this.weight:0}get overrideMouthAmount(){return"block"===this.overrideMouth?0<this.weight?1:0:"blend"===this.overrideMouth?this.weight:0}addBind(e){this._binds.push(e)}applyWeight(e){var t;let r=this.isBinary?0===this.weight?0:1:this.weight;r*=null!==(t=null==e?void 0:e.multiplier)&&void 0!==t?t:1,this._binds.forEach((e=>e.applyWeight(r)))}clearAppliedWeight(){this._binds.forEach((e=>e.clearAppliedWeight()))}}
/*! *****************************************************************************
    Copyright (c) Microsoft Corporation.

    Permission to use, copy, modify, and/or distribute this software for any
    purpose with or without fee is hereby granted.

    THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES WITH
    REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF MERCHANTABILITY
    AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY SPECIAL, DIRECT,
    INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES WHATSOEVER RESULTING FROM
    LOSS OF USE, DATA OR PROFITS, WHETHER IN AN ACTION OF CONTRACT, NEGLIGENCE OR
    OTHER TORTIOUS ACTION, ARISING OUT OF OR IN CONNECTION WITH THE USE OR
    PERFORMANCE OF THIS SOFTWARE.
    ***************************************************************************** */function o(e,t,r,i){return new(r||(r=Promise))((function(n,o){function s(e){try{l(i.next(e))}catch(e){o(e)}}function a(e){try{l(i.throw(e))}catch(e){o(e)}}function l(e){var t;e.done?n(e.value):(t=e.value,t instanceof r?t:new r((function(e){e(t)}))).then(s,a)}l((i=i.apply(e,t||[])).next())}))}function s(e,t,r){var i,n;const o=e.parser.json,s=null===(i=o.nodes)||void 0===i?void 0:i[t];if(null==s)return console.warn(`extractPrimitivesInternal: Attempt to use nodes[${t}] of glTF but the node doesn't exist`),null;const a=s.mesh;if(null==a)return null;const l=null===(n=o.meshes)||void 0===n?void 0:n[a];if(null==l)return console.warn(`extractPrimitivesInternal: Attempt to use meshes[${a}] of glTF but the mesh doesn't exist`),null;const u=l.primitives.length,d=[];return r.traverse((e=>{d.length<u&&e.isMesh&&d.push(e)})),d}function a(e,t){return o(this,void 0,void 0,(function*(){const r=yield e.parser.getDependency("node",t);return s(e,t,r)}))}function l(e){return o(this,void 0,void 0,(function*(){const t=yield e.parser.getDependencies("node"),r=new Map;return t.forEach(((t,i)=>{const n=s(e,i,t);null!=n&&r.set(i,n)})),r}))}function u(e,t){var r,n;let o=null;if(parseInt(i.REVISION,10)>=133)o=null!==(n=null===(r=e.associations.get(t))||void 0===r?void 0:r.materials)&&void 0!==n?n:null;else{const r=e.associations.get(t);"materials"===(null==r?void 0:r.type)&&(o=r.index)}return o}const d={Aa:"aa",Ih:"ih",Ou:"ou",Ee:"ee",Oh:"oh",Blink:"blink",Happy:"happy",Angry:"angry",Sad:"sad",Relaxed:"relaxed",LookUp:"lookUp",Surprised:"surprised",LookDown:"lookDown",LookLeft:"lookLeft",LookRight:"lookRight",BlinkLeft:"blinkLeft",BlinkRight:"blinkRight",Neutral:"neutral"};function h(e){return Math.max(Math.min(e,1),0)}class c{constructor(){this.blinkExpressionNames=["blink","blinkLeft","blinkRight"],this.lookAtExpressionNames=["lookLeft","lookRight","lookUp","lookDown"],this.mouthExpressionNames=["aa","ee","ih","oh","ou"],this._expressions=[],this._expressionMap={}}get expressions(){return this._expressions.concat()}get expressionMap(){return Object.assign({},this._expressionMap)}get presetExpressionMap(){const e={},t=new Set(Object.values(d));return Object.entries(this._expressionMap).forEach((([r,i])=>{t.has(r)&&(e[r]=i)})),e}get customExpressionMap(){const e={},t=new Set(Object.values(d));return Object.entries(this._expressionMap).forEach((([r,i])=>{t.has(r)||(e[r]=i)})),e}copy(e){return this._expressions.concat().forEach((e=>{this.unregisterExpression(e)})),e._expressions.forEach((e=>{this.registerExpression(e)})),this.blinkExpressionNames=e.blinkExpressionNames.concat(),this.lookAtExpressionNames=e.lookAtExpressionNames.concat(),this.mouthExpressionNames=e.mouthExpressionNames.concat(),this}clone(){return(new c).copy(this)}getExpression(e){var t;return null!==(t=this._expressionMap[e])&&void 0!==t?t:null}registerExpression(e){this._expressions.push(e),this._expressionMap[e.expressionName]=e}unregisterExpression(e){const t=this._expressions.indexOf(e);-1===t&&console.warn("VRMExpressionManager: The specified expressions is not registered"),this._expressions.splice(t,1),delete this._expressionMap[e.expressionName]}getValue(e){var t;const r=this.getExpression(e);return null!==(t=null==r?void 0:r.weight)&&void 0!==t?t:null}setValue(e,t){const r=this.getExpression(e);r&&(r.weight=h(t))}getExpressionTrackName(e){const t=this.getExpression(e);return t?`${t.name}.weight`:null}update(){const e=this._calculateWeightMultipliers();this._expressions.forEach((e=>{e.clearAppliedWeight()})),this._expressions.forEach((t=>{let r=1;const i=t.expressionName;-1!==this.blinkExpressionNames.indexOf(i)&&(r*=e.blink),-1!==this.lookAtExpressionNames.indexOf(i)&&(r*=e.lookAt),-1!==this.mouthExpressionNames.indexOf(i)&&(r*=e.mouth),t.applyWeight({multiplier:r})}))}_calculateWeightMultipliers(){let e=1,t=1,r=1;return this._expressions.forEach((i=>{e-=i.overrideBlinkAmount,t-=i.overrideLookAtAmount,r-=i.overrideMouthAmount})),e=Math.max(0,e),t=Math.max(0,t),r=Math.max(0,r),{blink:e,lookAt:t,mouth:r}}}const p={Color:"color",EmissionColor:"emissionColor",ShadeColor:"shadeColor",MatcapColor:"matcapColor",RimColor:"rimColor",OutlineColor:"outlineColor"},m={_Color:p.Color,_EmissionColor:p.EmissionColor,_ShadeColor:p.ShadeColor,_RimColor:p.RimColor,_OutlineColor:p.OutlineColor},f=new i.Color;class g{constructor({material:e,type:t,targetValue:r}){var n,o,s;this.material=e,this.type=t,this.targetValue=r;const a=null===(n=Object.entries(g._propertyNameMapMap).find((([t])=>!0===e[t])))||void 0===n?void 0:n[1],l=null!==(o=null==a?void 0:a[t])&&void 0!==o?o:null;if(null==l)console.warn(`Tried to add a material color bind to the material ${null!==(s=e.name)&&void 0!==s?s:"(no name)"}, the type ${t} but the material or the type is not supported.`),this._state=null;else{const t=e[l].clone(),n=new i.Color(r.r-t.r,r.g-t.g,r.b-t.b);this._state={propertyName:l,initialValue:t,deltaValue:n}}}applyWeight(e){if(null==this._state)return;const{propertyName:t,deltaValue:r}=this._state,i=this.material[t];void 0!==i&&(i.add(f.copy(r).multiplyScalar(e)),"boolean"==typeof this.material.shouldApplyUniforms&&(this.material.shouldApplyUniforms=!0))}clearAppliedWeight(){if(null==this._state)return;const{propertyName:e,initialValue:t}=this._state,r=this.material[e];void 0!==r&&(r.copy(t),"boolean"==typeof this.material.shouldApplyUniforms&&(this.material.shouldApplyUniforms=!0))}}g._propertyNameMapMap={isMeshStandardMaterial:{color:"color",emissionColor:"emissive"},isMeshBasicMaterial:{color:"color"},isMToonMaterial:{color:"color",emissionColor:"emissive",outlineColor:"outlineColorFactor",matcapColor:"matcapFactor",rimColor:"parametricRimColorFactor",shadeColor:"shadeColorFactor"}};class v{constructor({primitives:e,index:t,weight:r}){this.primitives=e,this.index=t,this.weight=r}applyWeight(e){this.primitives.forEach((t=>{var r;null!=(null===(r=t.morphTargetInfluences)||void 0===r?void 0:r[this.index])&&(t.morphTargetInfluences[this.index]+=this.weight*e)}))}clearAppliedWeight(){this.primitives.forEach((e=>{var t;null!=(null===(t=e.morphTargetInfluences)||void 0===t?void 0:t[this.index])&&(e.morphTargetInfluences[this.index]=0)}))}}const _=new i.Vector2;class M{constructor({material:e,scale:t,offset:r}){var i,n;this.material=e,this.scale=t,this.offset=r;const o=null===(i=Object.entries(M._propertyNamesMap).find((([t])=>!0===e[t])))||void 0===i?void 0:i[1];null==o?(console.warn(`Tried to add a texture transform bind to the material ${null!==(n=e.name)&&void 0!==n?n:"(no name)"} but the material is not supported.`),this._properties=[]):(this._properties=[],o.forEach((i=>{var n;const o=null===(n=e[i])||void 0===n?void 0:n.clone();if(!o)return null;e[i]=o;const s=o.offset.clone(),a=o.repeat.clone(),l=r.clone().sub(s),u=t.clone().sub(a);this._properties.push({name:i,initialOffset:s,deltaOffset:l,initialScale:a,deltaScale:u})})))}applyWeight(e){this._properties.forEach((t=>{const r=this.material[t.name];void 0!==r&&(r.offset.add(_.copy(t.deltaOffset).multiplyScalar(e)),r.repeat.add(_.copy(t.deltaScale).multiplyScalar(e)),r.needsUpdate=!0)}))}clearAppliedWeight(){this._properties.forEach((e=>{const t=this.material[e.name];void 0!==t&&(t.offset.copy(e.initialOffset),t.repeat.copy(e.initialScale),t.needsUpdate=!0)}))}}M._propertyNamesMap={isMeshStandardMaterial:["map","emissiveMap","bumpMap","normalMap","displacementMap","roughnessMap","metalnessMap","alphaMap"],isMeshBasicMaterial:["map","specularMap","alphaMap"],isMToonMaterial:["map","normalMap","emissiveMap","shadeMultiplyTexture","rimMultiplyTexture","outlineWidthMultiplyTexture","uvAnimationMaskTexture"]};class x{constructor(e){this.parser=e}get name(){return"VRMExpressionLoaderPlugin"}afterRoot(e){return o(this,void 0,void 0,(function*(){e.userData.vrmExpressionManager=yield this._import(e)}))}_import(e){return o(this,void 0,void 0,(function*(){const t=yield this._v1Import(e);if(t)return t;const r=yield this._v0Import(e);return r||null}))}_v1Import(e){var t,r;return o(this,void 0,void 0,(function*(){const s=this.parser.json;if(!(-1!==(null===(t=s.extensionsUsed)||void 0===t?void 0:t.indexOf("VRMC_vrm"))))return null;const l=null===(r=s.extensions)||void 0===r?void 0:r.VRMC_vrm;if(!l)return null;if("1.0-beta"!==l.specVersion)return null;const h=l.expressions;if(!h)return null;const p=new Set(Object.values(d)),m=new Map;null!=h.preset&&Object.entries(h.preset).forEach((([e,t])=>{null!=t&&(p.has(e)?m.set(e,t):console.warn(`VRMExpressionLoaderPlugin: Unknown preset name "${e}" detected. Ignoring the expression`))})),null!=h.custom&&Object.entries(h.custom).forEach((([e,t])=>{p.has(e)?console.warn(`VRMExpressionLoaderPlugin: Custom expression cannot have preset name "${e}". Ignoring the expression`):m.set(e,t)}));const f=new c;return yield Promise.all(Array.from(m.entries()).map((([t,r])=>o(this,void 0,void 0,(function*(){var s,l,d,h,c,p,m;const _=new n(t);if(e.scene.add(_),_.isBinary=null!==(s=r.isBinary)&&void 0!==s&&s,_.overrideBlink=null!==(l=r.overrideBlink)&&void 0!==l?l:"none",_.overrideLookAt=null!==(d=r.overrideLookAt)&&void 0!==d?d:"none",_.overrideMouth=null!==(h=r.overrideMouth)&&void 0!==h?h:"none",null===(c=r.morphTargetBinds)||void 0===c||c.forEach((t=>o(this,void 0,void 0,(function*(){var i;if(void 0===t.node||void 0===t.index)return;const n=yield a(e,t.node),o=t.index;n.every((e=>Array.isArray(e.morphTargetInfluences)&&o<e.morphTargetInfluences.length))?_.addBind(new v({primitives:n,index:o,weight:null!==(i=t.weight)&&void 0!==i?i:1})):console.warn(`VRMExpressionLoaderPlugin: ${r.name} attempts to index morph #${o} but not found.`)})))),r.materialColorBinds||r.textureTransformBinds){const t=[];e.scene.traverse((e=>{const r=e.material;r&&t.push(r)})),null===(p=r.materialColorBinds)||void 0===p||p.forEach((e=>o(this,void 0,void 0,(function*(){t.filter((t=>{const r=u(this.parser,t);return e.material===r})).forEach((t=>{_.addBind(new g({material:t,type:e.type,targetValue:(new i.Color).fromArray(e.targetValue)}))}))})))),null===(m=r.textureTransformBinds)||void 0===m||m.forEach((e=>o(this,void 0,void 0,(function*(){t.filter((t=>{const r=u(this.parser,t);return e.material===r})).forEach((t=>{var r,n;_.addBind(new M({material:t,offset:(new i.Vector2).fromArray(null!==(r=e.offset)&&void 0!==r?r:[0,0]),scale:(new i.Vector2).fromArray(null!==(n=e.scale)&&void 0!==n?n:[1,1])}))}))}))))}f.registerExpression(_)}))))),f}))}_v0Import(e){var t;return o(this,void 0,void 0,(function*(){const r=this.parser.json,s=null===(t=r.extensions)||void 0===t?void 0:t.VRM;if(!s)return null;const l=s.blendShapeMaster;if(!l)return null;const u=new c,d=l.blendShapeGroups;if(!d)return u;const h=new Set;return yield Promise.all(d.map((t=>o(this,void 0,void 0,(function*(){var s;const l=t.presetName,d=null!=l&&x.v0v1PresetNameMap[l]||null,c=null!=d?d:t.name;if(null==c)return void console.warn("VRMExpressionLoaderPlugin: One of custom expressions has no name. Ignoring the expression");if(h.has(c))return void console.warn(`VRMExpressionLoaderPlugin: An expression preset ${l} has duplicated entries. Ignoring the expression`);h.add(c);const p=new n(c);e.scene.add(p),p.isBinary=null!==(s=t.isBinary)&&void 0!==s&&s,t.binds&&t.binds.forEach((i=>o(this,void 0,void 0,(function*(){var n;if(void 0===i.mesh||void 0===i.index)return;const s=[];null===(n=r.nodes)||void 0===n||n.forEach(((e,t)=>{e.mesh===i.mesh&&s.push(t)}));const l=i.index;yield Promise.all(s.map((r=>o(this,void 0,void 0,(function*(){var n;const o=yield a(e,r);o.every((e=>Array.isArray(e.morphTargetInfluences)&&l<e.morphTargetInfluences.length))?p.addBind(new v({primitives:o,index:l,weight:.01*(null!==(n=i.weight)&&void 0!==n?n:100)})):console.warn(`VRMExpressionLoaderPlugin: ${t.name} attempts to index ${l}th morph but not found.`)})))))}))));const f=t.materialValues;f&&0!==f.length&&f.forEach((t=>{if(void 0===t.materialName||void 0===t.propertyName||void 0===t.targetValue)return;const r=[];e.scene.traverse((e=>{if(e.material){const i=e.material;Array.isArray(i)?r.push(...i.filter((e=>(e.name===t.materialName||e.name===t.materialName+" (Outline)")&&-1===r.indexOf(e)))):i.name===t.materialName&&-1===r.indexOf(i)&&r.push(i)}}));const n=t.propertyName;r.forEach((e=>{if("_MainTex_ST"===n){const r=new i.Vector2(t.targetValue[0],t.targetValue[1]),n=new i.Vector2(t.targetValue[2],t.targetValue[3]);return void p.addBind(new M({material:e,scale:r,offset:n}))}const r=m[n];r?p.addBind(new g({material:e,type:r,targetValue:new i.Color(...t.targetValue.slice(0,3))})):console.warn(n+" is not supported")}))})),u.registerExpression(p)}))))),u}))}}x.v0v1PresetNameMap={a:"aa",e:"ee",i:"ih",o:"oh",u:"ou",blink:"blink",joy:"happy",angry:"angry",sorrow:"sad",fun:"relaxed",lookup:"lookUp",lookdown:"lookDown",lookleft:"lookLeft",lookright:"lookRight",blink_l:"blinkLeft",blink_r:"blinkRight",neutral:"neutral"};class y{constructor(e,t){this._firstPersonOnlyLayer=y.DEFAULT_FIRSTPERSON_ONLY_LAYER,this._thirdPersonOnlyLayer=y.DEFAULT_THIRDPERSON_ONLY_LAYER,this._initializedLayers=!1,this.humanoid=e,this.meshAnnotations=t}copy(e){if(this.humanoid!==e.humanoid)throw new Error("VRMFirstPerson: humanoid must be same in order to copy");return this.meshAnnotations=e.meshAnnotations.map((e=>({meshes:e.meshes.concat(),type:e.type}))),this}clone(){return new y(this.humanoid,this.meshAnnotations).copy(this)}get firstPersonOnlyLayer(){return this._firstPersonOnlyLayer}get thirdPersonOnlyLayer(){return this._thirdPersonOnlyLayer}setup({firstPersonOnlyLayer:e=y.DEFAULT_FIRSTPERSON_ONLY_LAYER,thirdPersonOnlyLayer:t=y.DEFAULT_THIRDPERSON_ONLY_LAYER}={}){this._initializedLayers||(this._firstPersonOnlyLayer=e,this._thirdPersonOnlyLayer=t,this.meshAnnotations.forEach((e=>{e.meshes.forEach((t=>{"firstPersonOnly"===e.type?(t.layers.set(this._firstPersonOnlyLayer),t.traverse((e=>e.layers.set(this._firstPersonOnlyLayer)))):"thirdPersonOnly"===e.type?(t.layers.set(this._thirdPersonOnlyLayer),t.traverse((e=>e.layers.set(this._thirdPersonOnlyLayer)))):"auto"===e.type&&this._createHeadlessModel(t)}))})),this._initializedLayers=!0)}_excludeTriangles(e,t,r,i){let n=0;if(null!=t&&t.length>0)for(let o=0;o<e.length;o+=3){const s=e[o],a=e[o+1],l=e[o+2],u=t[s],d=r[s];if(u[0]>0&&i.includes(d[0]))continue;if(u[1]>0&&i.includes(d[1]))continue;if(u[2]>0&&i.includes(d[2]))continue;if(u[3]>0&&i.includes(d[3]))continue;const h=t[a],c=r[a];if(h[0]>0&&i.includes(c[0]))continue;if(h[1]>0&&i.includes(c[1]))continue;if(h[2]>0&&i.includes(c[2]))continue;if(h[3]>0&&i.includes(c[3]))continue;const p=t[l],m=r[l];p[0]>0&&i.includes(m[0])||(p[1]>0&&i.includes(m[1])||p[2]>0&&i.includes(m[2])||p[3]>0&&i.includes(m[3])||(e[n++]=s,e[n++]=a,e[n++]=l))}return n}_createErasedMesh(e,t){const r=new i.SkinnedMesh(e.geometry.clone(),e.material);r.name=`${e.name}(erase)`,r.frustumCulled=e.frustumCulled,r.layers.set(this._firstPersonOnlyLayer);const n=r.geometry,o=n.getAttribute("skinIndex").array,s=[];for(let e=0;e<o.length;e+=4)s.push([o[e],o[e+1],o[e+2],o[e+3]]);const a=n.getAttribute("skinWeight").array,l=[];for(let e=0;e<a.length;e+=4)l.push([a[e],a[e+1],a[e+2],a[e+3]]);const u=n.getIndex();if(!u)throw new Error("The geometry doesn't have an index buffer");const d=Array.from(u.array),h=this._excludeTriangles(d,l,s,t),c=[];for(let e=0;e<h;e++)c[e]=d[e];return n.setIndex(c),e.onBeforeRender&&(r.onBeforeRender=e.onBeforeRender),r.bind(new i.Skeleton(e.skeleton.bones,e.skeleton.boneInverses),new i.Matrix4),r}_createHeadlessModelForSkinnedMesh(e,t){const r=[];if(t.skeleton.bones.forEach(((e,t)=>{this._isEraseTarget(e)&&r.push(t)})),!r.length)return t.layers.enable(this._thirdPersonOnlyLayer),void t.layers.enable(this._firstPersonOnlyLayer);t.layers.set(this._thirdPersonOnlyLayer);const i=this._createErasedMesh(t,r);e.add(i)}_createHeadlessModel(e){if("Group"===e.type)if(e.layers.set(this._thirdPersonOnlyLayer),this._isEraseTarget(e))e.traverse((e=>e.layers.set(this._thirdPersonOnlyLayer)));else{const t=new i.Group;t.name=`_headless_${e.name}`,t.layers.set(this._firstPersonOnlyLayer),e.parent.add(t),e.children.filter((e=>"SkinnedMesh"===e.type)).forEach((e=>{const r=e;this._createHeadlessModelForSkinnedMesh(t,r)}))}else if("SkinnedMesh"===e.type){const t=e;this._createHeadlessModelForSkinnedMesh(e.parent,t)}else this._isEraseTarget(e)&&(e.layers.set(this._thirdPersonOnlyLayer),e.traverse((e=>e.layers.set(this._thirdPersonOnlyLayer))))}_isEraseTarget(e){return e===this.humanoid.getRawBoneNode("head")||!!e.parent&&this._isEraseTarget(e.parent)}}y.DEFAULT_FIRSTPERSON_ONLY_LAYER=9,y.DEFAULT_THIRDPERSON_ONLY_LAYER=10;class R{constructor(e){this.parser=e}get name(){return"VRMFirstPersonLoaderPlugin"}afterRoot(e){return o(this,void 0,void 0,(function*(){const t=e.userData.vrmHumanoid;if(null!==t){if(void 0===t)throw new Error("VRMFirstPersonLoaderPlugin: vrmHumanoid is undefined. VRMHumanoidLoaderPlugin have to be used first");e.userData.vrmFirstPerson=yield this._import(e,t)}}))}_import(e,t){return o(this,void 0,void 0,(function*(){if(null==t)return null;const r=yield this._v1Import(e,t);if(r)return r;const i=yield this._v0Import(e,t);return i||null}))}_v1Import(e,t){var r,i;return o(this,void 0,void 0,(function*(){const n=this.parser.json;if(!(-1!==(null===(r=n.extensionsUsed)||void 0===r?void 0:r.indexOf("VRMC_vrm"))))return null;const o=null===(i=n.extensions)||void 0===i?void 0:i.VRMC_vrm;if(!o)return null;if("1.0-beta"!==o.specVersion)return null;const s=o.firstPerson;if(!s)return null;const a=[],u=yield l(e);return Array.from(u.entries()).forEach((([e,t])=>{var r;const i=s.meshAnnotations?s.meshAnnotations.find((t=>t.node===e)):void 0;a.push({meshes:t,type:null!==(r=null==i?void 0:i.type)&&void 0!==r?r:"both"})})),new y(t,a)}))}_v0Import(e,t){var r;return o(this,void 0,void 0,(function*(){const i=this.parser.json,n=null===(r=i.extensions)||void 0===r?void 0:r.VRM;if(!n)return null;const o=n.firstPerson;if(!o)return null;const s=[],a=yield l(e);return Array.from(a.entries()).forEach((([e,t])=>{const r=i.nodes[e],n=o.meshAnnotations?o.meshAnnotations.find((e=>e.mesh===r.mesh)):void 0;s.push({meshes:t,type:this._convertV0FlagToV1Type(null==n?void 0:n.firstPersonFlag)})})),new y(t,s)}))}_convertV0FlagToV1Type(e){return"FirstPersonOnly"===e?"firstPersonOnly":"ThirdPersonOnly"===e?"thirdPersonOnly":"Auto"===e?"auto":"both"}}const T=new i.Vector3,w=new i.Vector3,E=new i.Quaternion;class P extends i.Group{constructor(e){super(),this.vrmHumanoid=e,this._boneAxesMap=new Map,Object.values(e.humanBones).forEach((e=>{const t=new i.AxesHelper(1);t.matrixAutoUpdate=!1,t.material.depthTest=!1,t.material.depthWrite=!1,this.add(t),this._boneAxesMap.set(e,t)}))}dispose(){Array.from(this._boneAxesMap.values()).forEach((e=>{e.geometry.dispose(),e.material.dispose()}))}updateMatrixWorld(e){Array.from(this._boneAxesMap.entries()).forEach((([e,t])=>{e.node.updateWorldMatrix(!0,!1),e.node.matrixWorld.decompose(T,E,w);const r=T.set(.1,.1,.1).divide(w);t.matrix.copy(e.node.matrixWorld).scale(r)})),super.updateMatrixWorld(e)}}const L=["hips","spine","chest","upperChest","neck","head","leftEye","rightEye","jaw","leftUpperLeg","leftLowerLeg","leftFoot","leftToes","rightUpperLeg","rightLowerLeg","rightFoot","rightToes","leftShoulder","leftUpperArm","leftLowerArm","leftHand","rightShoulder","rightUpperArm","rightLowerArm","rightHand","leftThumbMetacarpal","leftThumbProximal","leftThumbDistal","leftIndexProximal","leftIndexIntermediate","leftIndexDistal","leftMiddleProximal","leftMiddleIntermediate","leftMiddleDistal","leftRingProximal","leftRingIntermediate","leftRingDistal","leftLittleProximal","leftLittleIntermediate","leftLittleDistal","rightThumbMetacarpal","rightThumbProximal","rightThumbDistal","rightIndexProximal","rightIndexIntermediate","rightIndexDistal","rightMiddleProximal","rightMiddleIntermediate","rightMiddleDistal","rightRingProximal","rightRingIntermediate","rightRingDistal","rightLittleProximal","rightLittleIntermediate","rightLittleDistal"],S={hips:null,spine:"hips",chest:"spine",upperChest:"chest",neck:"upperChest",head:"neck",leftEye:"head",rightEye:"head",jaw:"head",leftUpperLeg:"hips",leftLowerLeg:"leftUpperLeg",leftFoot:"leftLowerLeg",leftToes:"leftFoot",rightUpperLeg:"hips",rightLowerLeg:"rightUpperLeg",rightFoot:"rightLowerLeg",rightToes:"rightFoot",leftShoulder:"chest",leftUpperArm:"leftShoulder",leftLowerArm:"leftUpperArm",leftHand:"leftLowerArm",rightShoulder:"chest",rightUpperArm:"rightShoulder",rightLowerArm:"rightUpperArm",rightHand:"rightLowerArm",leftThumbMetacarpal:"leftHand",leftThumbProximal:"leftThumbMetacarpal",leftThumbDistal:"leftThumbProximal",leftIndexProximal:"leftHand",leftIndexIntermediate:"leftIndexProximal",leftIndexDistal:"leftIndexIntermediate",leftMiddleProximal:"leftHand",leftMiddleIntermediate:"leftMiddleProximal",leftMiddleDistal:"leftMiddleIntermediate",leftRingProximal:"leftHand",leftRingIntermediate:"leftRingProximal",leftRingDistal:"leftRingIntermediate",leftLittleProximal:"leftHand",leftLittleIntermediate:"leftLittleProximal",leftLittleDistal:"leftLittleIntermediate",rightThumbMetacarpal:"rightHand",rightThumbProximal:"rightThumbMetacarpal",rightThumbDistal:"rightThumbProximal",rightIndexProximal:"rightHand",rightIndexIntermediate:"rightIndexProximal",rightIndexDistal:"rightIndexIntermediate",rightMiddleProximal:"rightHand",rightMiddleIntermediate:"rightMiddleProximal",rightMiddleDistal:"rightMiddleIntermediate",rightRingProximal:"rightHand",rightRingIntermediate:"rightRingProximal",rightRingDistal:"rightRingIntermediate",rightLittleProximal:"rightHand",rightLittleIntermediate:"rightLittleProximal",rightLittleDistal:"rightLittleIntermediate"};function A(e){return e.invert?e.invert():e.inverse(),e}const b=new i.Vector3,I=new i.Quaternion;class U{constructor(e){this.humanBones=e,this.restPose=this.getAbsolutePose()}getAbsolutePose(){const e={};return Object.keys(this.humanBones).forEach((t=>{const r=t,i=this.getBoneNode(r);i&&(b.copy(i.position),I.copy(i.quaternion),e[r]={position:b.toArray(),rotation:I.toArray()})})),e}getPose(){const e={};return Object.keys(this.humanBones).forEach((t=>{const r=t,i=this.getBoneNode(r);if(!i)return;b.set(0,0,0),I.identity();const n=this.restPose[r];(null==n?void 0:n.position)&&b.fromArray(n.position).negate(),(null==n?void 0:n.rotation)&&A(I.fromArray(n.rotation)),b.add(i.position),I.premultiply(i.quaternion),e[r]={position:b.toArray(),rotation:I.toArray()}})),e}setPose(e){Object.entries(e).forEach((([e,t])=>{const r=e,i=this.getBoneNode(r);if(!i)return;const n=this.restPose[r];n&&((null==t?void 0:t.position)&&(i.position.fromArray(t.position),n.position&&i.position.add(b.fromArray(n.position))),(null==t?void 0:t.rotation)&&(i.quaternion.fromArray(t.rotation),n.rotation&&i.quaternion.multiply(I.fromArray(n.rotation))))}))}resetPose(){Object.entries(this.restPose).forEach((([e,t])=>{const r=this.getBoneNode(e);r&&((null==t?void 0:t.position)&&r.position.fromArray(t.position),(null==t?void 0:t.rotation)&&r.quaternion.fromArray(t.rotation))}))}getBone(e){var t;return null!==(t=this.humanBones[e])&&void 0!==t?t:void 0}getBoneNode(e){var t,r;return null!==(r=null===(t=this.humanBones[e])||void 0===t?void 0:t.node)&&void 0!==r?r:null}}const V=new i.Vector3,O=new i.Quaternion;class C extends U{constructor(e){const{rigBones:t,root:r,parentWorldRotations:i,boneRotations:n}=C._setupTransforms(e);super(t),this.original=e,this.root=r,this._parentWorldRotations=i,this._boneRotations=n}static _setupTransforms(e){const t=new i.Object3D;t.name="VRMHumanoidRig";const r={},n={},o={};L.forEach((t=>{const s=e.getBoneNode(t);if(s){const e=new i.Vector3,a=new i.Quaternion;s.updateWorldMatrix(!0,!1),s.matrixWorld.decompose(e,a,V),r[t]=e,n[t]=a,o[t]=s.quaternion.clone()}}));const s={},a={};return L.forEach((o=>{var l;const u=e.getBoneNode(o);if(u){const e=r[o];let d,h,c=o;for(;null==d&&(c=S[c],null!=c);)d=r[c],h=n[c];const p=new i.Object3D;p.name="Normalized_"+u.name;(c?null===(l=a[c])||void 0===l?void 0:l.node:t).add(p),p.position.copy(e),d&&p.position.sub(d),a[o]={node:p},s[o]=null!=h?h:new i.Quaternion}})),{rigBones:a,root:t,parentWorldRotations:s,boneRotations:o}}update(){L.forEach((e=>{const t=this.original.getBoneNode(e);if(null!=t){const r=this.getBoneNode(e),n=this._parentWorldRotations[e],o=O.copy(n).invert(),s=this._boneRotations[e];if(t.quaternion.copy(r.quaternion).multiply(n).premultiply(o).multiply(s),"hips"===e){const e=r.getWorldPosition(new i.Vector3),n=t.parent.matrixWorld,o=e.applyMatrix4(n.invert());t.position.copy(o)}}}))}}class N{constructor(e,t){var r;this.autoUpdateHumanBones=null===(r=null==t?void 0:t.autoUpdateHumanBones)||void 0===r||r,this._rawHumanBones=new U(e),this._normalizedHumanBones=new C(this._rawHumanBones)}get restPose(){return console.warn("VRMHumanoid: restPose is deprecated. Use either rawRestPose or normalizedRestPose instead."),this.rawRestPose}get rawRestPose(){return this._rawHumanBones.restPose}get normalizedRestPose(){return this._normalizedHumanBones.restPose}get humanBones(){return this._rawHumanBones.humanBones}get rawHumanBones(){return this._rawHumanBones.humanBones}get normalizedHumanBones(){return this._normalizedHumanBones.humanBones}get normalizedHumanBonesRoot(){return this._normalizedHumanBones.root}copy(e){return this.autoUpdateHumanBones=e.autoUpdateHumanBones,this._rawHumanBones=new U(e.humanBones),this._normalizedHumanBones=new C(this._rawHumanBones),this}clone(){return new N(this.humanBones,{autoUpdateHumanBones:this.autoUpdateHumanBones}).copy(this)}getAbsolutePose(){return console.warn("VRMHumanoid: getAbsolutePose() is deprecated. Use either getRawAbsolutePose() or getNormalizedAbsolutePose() instead."),this.getRawAbsolutePose()}getRawAbsolutePose(){return this._rawHumanBones.getAbsolutePose()}getNormalizedAbsolutePose(){return this._normalizedHumanBones.getAbsolutePose()}getPose(){return console.warn("VRMHumanoid: getPose() is deprecated. Use either getRawPose() or getNormalizedPose() instead."),this.getRawPose()}getRawPose(){return this._rawHumanBones.getPose()}getNormalizedPose(){return this._normalizedHumanBones.getPose()}setPose(e){return console.warn("VRMHumanoid: setPose() is deprecated. Use either setRawPose() or setNormalizedPose() instead."),this.setRawPose(e)}setRawPose(e){return this._rawHumanBones.setPose(e)}setNormalizedPose(e){return this._normalizedHumanBones.setPose(e)}resetPose(){return console.warn("VRMHumanoid: resetPose() is deprecated. Use either resetRawPose() or resetNormalizedPose() instead."),this.resetRawPose()}resetRawPose(){return this._rawHumanBones.resetPose()}resetNormalizedPose(){return this._rawHumanBones.resetPose()}getBone(e){return console.warn("VRMHumanoid: getBone() is deprecated. Use either getRawBone() or getNormalizedBone() instead."),this.getRawBone(e)}getRawBone(e){return this._rawHumanBones.getBone(e)}getNormalizedBone(e){return this._normalizedHumanBones.getBone(e)}getBoneNode(e){return console.warn("VRMHumanoid: getBoneNode() is deprecated. Use either getRawBoneNode() or getNormalizedBoneNode() instead."),this.getRawBoneNode(e)}getRawBoneNode(e){return this._rawHumanBones.getBoneNode(e)}getNormalizedBoneNode(e){return this._normalizedHumanBones.getBoneNode(e)}update(){this.autoUpdateHumanBones&&this._normalizedHumanBones.update()}}const D={Hips:"hips",Spine:"spine",Head:"head",LeftUpperLeg:"leftUpperLeg",LeftLowerLeg:"leftLowerLeg",LeftFoot:"leftFoot",RightUpperLeg:"rightUpperLeg",RightLowerLeg:"rightLowerLeg",RightFoot:"rightFoot",LeftUpperArm:"leftUpperArm",LeftLowerArm:"leftLowerArm",LeftHand:"leftHand",RightUpperArm:"rightUpperArm",RightLowerArm:"rightLowerArm",RightHand:"rightHand"},F={leftThumbProximal:"leftThumbMetacarpal",leftThumbIntermediate:"leftThumbProximal",rightThumbProximal:"rightThumbMetacarpal",rightThumbIntermediate:"rightThumbProximal"};class B{constructor(e,t){this.parser=e,this.helperRoot=null==t?void 0:t.helperRoot,this.autoUpdateHumanBones=null==t?void 0:t.autoUpdateHumanBones}get name(){return"VRMHumanoidLoaderPlugin"}afterRoot(e){return o(this,void 0,void 0,(function*(){e.userData.vrmHumanoid=yield this._import(e)}))}_import(e){return o(this,void 0,void 0,(function*(){const t=yield this._v1Import(e);if(t)return t;const r=yield this._v0Import(e);return r||null}))}_v1Import(e){var t,r;return o(this,void 0,void 0,(function*(){const i=this.parser.json;if(!(-1!==(null===(t=i.extensionsUsed)||void 0===t?void 0:t.indexOf("VRMC_vrm"))))return null;const n=null===(r=i.extensions)||void 0===r?void 0:r.VRMC_vrm;if(!n)return null;if("1.0-beta"!==n.specVersion)return null;const s=n.humanoid;if(!s)return null;const a=null!=s.humanBones.leftThumbIntermediate||null!=s.humanBones.rightThumbIntermediate,l={};null!=s.humanBones&&(yield Promise.all(Object.entries(s.humanBones).map((([e,t])=>o(this,void 0,void 0,(function*(){let r=e;const i=t.node;if(a){const e=F[r];null!=e&&(r=e)}const n=yield this.parser.getDependency("node",i);null!=n?l[r]={node:n}:console.warn(`A glTF node bound to the humanoid bone ${r} (index = ${i}) does not exist`)}))))));const u=new N(this._ensureRequiredBonesExist(l),{autoUpdateHumanBones:this.autoUpdateHumanBones});if(e.scene.add(u.normalizedHumanBonesRoot),this.helperRoot){const e=new P(u);this.helperRoot.add(e),e.renderOrder=this.helperRoot.renderOrder}return u}))}_v0Import(e){var t;return o(this,void 0,void 0,(function*(){const r=this.parser.json,i=null===(t=r.extensions)||void 0===t?void 0:t.VRM;if(!i)return null;const n=i.humanoid;if(!n)return null;const s={};null!=n.humanBones&&(yield Promise.all(n.humanBones.map((e=>o(this,void 0,void 0,(function*(){const t=e.bone,r=e.node;if(null==t||null==r)return;const i=yield this.parser.getDependency("node",r);if(null==i)return void console.warn(`A glTF node bound to the humanoid bone ${t} (index = ${r}) does not exist`);const n=F[t],o=null!=n?n:t;null==s[o]?s[o]={node:i}:console.warn(`Multiple bone entries for ${o} detected (index = ${r}), ignoring duplicated entries.`)}))))));const a=new N(this._ensureRequiredBonesExist(s),{autoUpdateHumanBones:this.autoUpdateHumanBones});if(e.scene.add(a.normalizedHumanBonesRoot),this.helperRoot){const e=new P(a);this.helperRoot.add(e),e.renderOrder=this.helperRoot.renderOrder}return a}))}_ensureRequiredBonesExist(e){const t=Object.values(D).filter((t=>null==e[t]));if(t.length>0)throw new Error(`VRMHumanoidLoaderPlugin: These humanoid bones are required but not exist: ${t.join(", ")}`);return e}}class H extends i.BufferGeometry{constructor(){super(),this._currentTheta=0,this._currentRadius=0,this.theta=0,this.radius=0,this._currentTheta=0,this._currentRadius=0,this._attrPos=new i.BufferAttribute(new Float32Array(195),3),this.setAttribute("position",this._attrPos),this._attrIndex=new i.BufferAttribute(new Uint16Array(189),1),this.setIndex(this._attrIndex),this._buildIndex(),this.update()}update(){let e=!1;this._currentTheta!==this.theta&&(this._currentTheta=this.theta,e=!0),this._currentRadius!==this.radius&&(this._currentRadius=this.radius,e=!0),e&&this._buildPosition()}_buildPosition(){this._attrPos.setXYZ(0,0,0,0);for(let e=0;e<64;e++){const t=e/63*this._currentTheta;this._attrPos.setXYZ(e+1,this._currentRadius*Math.sin(t),0,this._currentRadius*Math.cos(t))}this._attrPos.needsUpdate=!0}_buildIndex(){for(let e=0;e<63;e++)this._attrIndex.setXYZ(3*e,0,e+1,e+2);this._attrIndex.needsUpdate=!0}}class k extends i.BufferGeometry{constructor(){super(),this.radius=0,this._currentRadius=0,this.tail=new i.Vector3,this._currentTail=new i.Vector3,this._attrPos=new i.BufferAttribute(new Float32Array(294),3),this.setAttribute("position",this._attrPos),this._attrIndex=new i.BufferAttribute(new Uint16Array(194),1),this.setIndex(this._attrIndex),this._buildIndex(),this.update()}update(){let e=!1;this._currentRadius!==this.radius&&(this._currentRadius=this.radius,e=!0),this._currentTail.equals(this.tail)||(this._currentTail.copy(this.tail),e=!0),e&&this._buildPosition()}_buildPosition(){for(let e=0;e<32;e++){const t=e/16*Math.PI;this._attrPos.setXYZ(e,Math.cos(t),Math.sin(t),0),this._attrPos.setXYZ(32+e,0,Math.cos(t),Math.sin(t)),this._attrPos.setXYZ(64+e,Math.sin(t),0,Math.cos(t))}this.scale(this._currentRadius,this._currentRadius,this._currentRadius),this.translate(this._currentTail.x,this._currentTail.y,this._currentTail.z),this._attrPos.setXYZ(96,0,0,0),this._attrPos.setXYZ(97,this._currentTail.x,this._currentTail.y,this._currentTail.z),this._attrPos.needsUpdate=!0}_buildIndex(){for(let e=0;e<32;e++){const t=(e+1)%32;this._attrIndex.setXY(2*e,e,t),this._attrIndex.setXY(64+2*e,32+e,32+t),this._attrIndex.setXY(128+2*e,64+e,64+t)}this._attrIndex.setXY(192,96,97),this._attrIndex.needsUpdate=!0}}const W=new i.Quaternion,z=new i.Quaternion,j=new i.Vector3,G=new i.Vector3,X=Math.sqrt(2)/2,Y=new i.Quaternion(0,0,-X,X),Q=new i.Vector3(0,1,0);class q extends i.Group{constructor(e){super(),this.matrixAutoUpdate=!1,this.vrmLookAt=e;{const e=new H;e.radius=.5;const t=new i.MeshBasicMaterial({color:65280,transparent:!0,opacity:.5,side:i.DoubleSide,depthTest:!1,depthWrite:!1});this._meshPitch=new i.Mesh(e,t),this.add(this._meshPitch)}{const e=new H;e.radius=.5;const t=new i.MeshBasicMaterial({color:16711680,transparent:!0,opacity:.5,side:i.DoubleSide,depthTest:!1,depthWrite:!1});this._meshYaw=new i.Mesh(e,t),this.add(this._meshYaw)}{const e=new k;e.radius=.1;const t=new i.LineBasicMaterial({color:16777215,depthTest:!1,depthWrite:!1});this._lineTarget=new i.LineSegments(e,t),this._lineTarget.frustumCulled=!1,this.add(this._lineTarget)}}dispose(){this._meshYaw.geometry.dispose(),this._meshYaw.material.dispose(),this._meshPitch.geometry.dispose(),this._meshPitch.material.dispose(),this._lineTarget.geometry.dispose(),this._lineTarget.material.dispose()}updateMatrixWorld(e){const t=i.MathUtils.DEG2RAD*this.vrmLookAt.yaw;this._meshYaw.geometry.theta=t,this._meshYaw.geometry.update();const r=i.MathUtils.DEG2RAD*this.vrmLookAt.pitch;this._meshPitch.geometry.theta=r,this._meshPitch.geometry.update(),this.vrmLookAt.getLookAtWorldPosition(j),this.vrmLookAt.getLookAtWorldQuaternion(W),W.multiply(this.vrmLookAt.getFaceFrontQuaternion(z)),this._meshYaw.position.copy(j),this._meshYaw.quaternion.copy(W),this._meshPitch.position.copy(j),this._meshPitch.quaternion.copy(W),this._meshPitch.quaternion.multiply(z.setFromAxisAngle(Q,t)),this._meshPitch.quaternion.multiply(Y);const{target:n,autoUpdate:o}=this.vrmLookAt;null!=n&&o&&(n.getWorldPosition(G).sub(j),this._lineTarget.geometry.tail.copy(G),this._lineTarget.geometry.update(),this._lineTarget.position.copy(j)),super.updateMatrixWorld(e)}}const $=new i.Vector3,Z=new i.Vector3;function J(e){return[Math.atan2(-e.z,e.x),Math.atan2(e.y,Math.sqrt(e.x*e.x+e.z*e.z))]}function K(e){const t=Math.round(e/2/Math.PI);return e-2*Math.PI*t}const ee=new i.Vector3(0,0,1),te=new i.Vector3,re=new i.Vector3,ie=new i.Vector3,ne=new i.Quaternion,oe=new i.Quaternion,se=new i.Quaternion,ae=new i.Euler;class le{constructor(e,t){this.offsetFromHeadBone=new i.Vector3,this.autoUpdate=!0,this.faceFront=new i.Vector3(0,0,1),this.humanoid=e,this.applier=t,this._yaw=0,this._pitch=0,this._needsUpdate=!0}get yaw(){return this._yaw}set yaw(e){this._yaw=e,this._needsUpdate=!0}get pitch(){return this._pitch}set pitch(e){this._pitch=e,this._needsUpdate=!0}get euler(){return console.warn("VRMLookAt: euler is deprecated. use getEuler() instead."),this.getEuler(new i.Euler)}getEuler(e){return e.set(i.MathUtils.DEG2RAD*this._pitch,i.MathUtils.DEG2RAD*this._yaw,0,"YXZ")}copy(e){if(this.humanoid!==e.humanoid)throw new Error("VRMLookAt: humanoid must be same in order to copy");return this.offsetFromHeadBone.copy(e.offsetFromHeadBone),this.applier=e.applier,this.autoUpdate=e.autoUpdate,this.target=e.target,this.faceFront.copy(e.faceFront),this}clone(){return new le(this.humanoid,this.applier).copy(this)}reset(){this._yaw=0,this._pitch=0,this._needsUpdate=!0}getLookAtWorldPosition(e){const t=this.humanoid.getRawBoneNode("head");return e.copy(this.offsetFromHeadBone).applyMatrix4(t.matrixWorld)}getLookAtWorldQuaternion(e){const t=this.humanoid.getRawBoneNode("head");return r=e,t.matrixWorld.decompose($,r,Z),r;var r}getFaceFrontQuaternion(e){if(this.faceFront.distanceToSquared(ee)<.01)return e.identity();const[t,r]=J(this.faceFront);return ae.set(0,.5*Math.PI+t,r,"YZX"),e.setFromEuler(ae)}getLookAtWorldDirection(e){return this.getLookAtWorldQuaternion(oe),this.getFaceFrontQuaternion(se),e.copy(ee).applyQuaternion(oe).applyQuaternion(se).applyEuler(this.getEuler(ae))}lookAt(e){const t=A(this.getLookAtWorldQuaternion(ne)),r=this.getLookAtWorldPosition(re),n=ie.copy(e).sub(r).applyQuaternion(t).normalize(),[o,s]=J(this.faceFront),[a,l]=J(n),u=K(a-o),d=K(s-l);this._yaw=i.MathUtils.RAD2DEG*u,this._pitch=i.MathUtils.RAD2DEG*d,this._needsUpdate=!0}update(e){null!=this.target&&this.autoUpdate&&this.lookAt(this.target.getWorldPosition(te)),this._needsUpdate&&(this._needsUpdate=!1,this.applier.applyYawPitch(this._yaw,this._pitch))}}le.EULER_ORDER="YXZ";const ue=new i.Vector3(0,0,1),de=new i.Quaternion,he=new i.Quaternion,ce=new i.Euler(0,0,0,"YXZ");class pe{constructor(e,t,r,n,o){this.humanoid=e,this.rangeMapHorizontalInner=t,this.rangeMapHorizontalOuter=r,this.rangeMapVerticalDown=n,this.rangeMapVerticalUp=o,this.faceFront=new i.Vector3(0,0,1),this._restQuatLeftEye=new i.Quaternion,this._restQuatRightEye=new i.Quaternion;const s=this.humanoid.getRawBoneNode("leftEye"),a=this.humanoid.getRawBoneNode("leftEye");s&&this._restQuatLeftEye.copy(s.quaternion),a&&this._restQuatRightEye.copy(a.quaternion)}applyYawPitch(e,t){const r=this.humanoid.getRawBoneNode("leftEye"),n=this.humanoid.getRawBoneNode("rightEye"),o=this.humanoid.getNormalizedBoneNode("leftEye"),s=this.humanoid.getNormalizedBoneNode("rightEye");r&&(ce.x=t<0?-i.MathUtils.DEG2RAD*this.rangeMapVerticalDown.map(-t):i.MathUtils.DEG2RAD*this.rangeMapVerticalUp.map(t),ce.y=e<0?-i.MathUtils.DEG2RAD*this.rangeMapHorizontalInner.map(-e):i.MathUtils.DEG2RAD*this.rangeMapHorizontalOuter.map(e),de.setFromEuler(ce),this._getFaceFrontQuaternion(he),r.quaternion.copy(he).premultiply(de).premultiply(he.invert()).multiply(this._restQuatLeftEye),o.quaternion.copy(he).premultiply(de).premultiply(he.invert())),n&&(ce.x=t<0?-i.MathUtils.DEG2RAD*this.rangeMapVerticalDown.map(-t):i.MathUtils.DEG2RAD*this.rangeMapVerticalUp.map(t),ce.y=e<0?-i.MathUtils.DEG2RAD*this.rangeMapHorizontalOuter.map(-e):i.MathUtils.DEG2RAD*this.rangeMapHorizontalInner.map(e),de.setFromEuler(ce),this._getFaceFrontQuaternion(he),n.quaternion.copy(he).premultiply(de).premultiply(he.invert()).multiply(this._restQuatRightEye),s.quaternion.copy(he).premultiply(de).premultiply(he.invert()))}lookAt(e){console.warn("VRMLookAtBoneApplier: lookAt() is deprecated. use apply() instead.");const t=i.MathUtils.RAD2DEG*e.y,r=i.MathUtils.RAD2DEG*e.x;this.applyYawPitch(t,r)}_getFaceFrontQuaternion(e){if(this.faceFront.distanceToSquared(ue)<.01)return e.identity();const[t,r]=J(this.faceFront);return ce.set(0,.5*Math.PI+t,r,"YZX"),e.setFromEuler(ce)}}pe.type="bone";class me{constructor(e,t,r,i,n){this.expressions=e,this.rangeMapHorizontalInner=t,this.rangeMapHorizontalOuter=r,this.rangeMapVerticalDown=i,this.rangeMapVerticalUp=n}applyYawPitch(e,t){t<0?(this.expressions.setValue("lookDown",0),this.expressions.setValue("lookUp",this.rangeMapVerticalUp.map(-t))):(this.expressions.setValue("lookUp",0),this.expressions.setValue("lookDown",this.rangeMapVerticalDown.map(t))),e<0?(this.expressions.setValue("lookLeft",0),this.expressions.setValue("lookRight",this.rangeMapHorizontalOuter.map(-e))):(this.expressions.setValue("lookRight",0),this.expressions.setValue("lookLeft",this.rangeMapHorizontalOuter.map(e)))}lookAt(e){console.warn("VRMLookAtBoneApplier: lookAt() is deprecated. use apply() instead.");const t=i.MathUtils.RAD2DEG*e.y,r=i.MathUtils.RAD2DEG*e.x;this.applyYawPitch(t,r)}}me.type="expression";class fe{constructor(e,t){this.inputMaxValue=e,this.outputScale=t}map(e){return this.outputScale*h(e/this.inputMaxValue)}}class ge{constructor(e,t){this.parser=e,this.helperRoot=null==t?void 0:t.helperRoot}get name(){return"VRMLookAtLoaderPlugin"}afterRoot(e){return o(this,void 0,void 0,(function*(){const t=e.userData.vrmHumanoid;if(null===t)return;if(void 0===t)throw new Error("VRMFirstPersonLoaderPlugin: vrmHumanoid is undefined. VRMHumanoidLoaderPlugin have to be used first");const r=e.userData.vrmExpressionManager;if(null!==r){if(void 0===r)throw new Error("VRMFirstPersonLoaderPlugin: vrmExpressionManager is undefined. VRMExpressionLoaderPlugin have to be used first");e.userData.vrmLookAt=yield this._import(e,t,r)}}))}_import(e,t,r){return o(this,void 0,void 0,(function*(){if(null==t||null==r)return null;const i=yield this._v1Import(e,t,r);if(i)return i;const n=yield this._v0Import(e,t,r);return n||null}))}_v1Import(e,t,r){var i,n,s;return o(this,void 0,void 0,(function*(){const e=this.parser.json;if(!(-1!==(null===(i=e.extensionsUsed)||void 0===i?void 0:i.indexOf("VRMC_vrm"))))return null;const o=null===(n=e.extensions)||void 0===n?void 0:n.VRMC_vrm;if(!o)return null;if("1.0-beta"!==o.specVersion)return null;const a=o.lookAt;if(!a)return null;const l="expression"===a.type?1:10,u=this._v1ImportRangeMap(a.rangeMapHorizontalInner,l),d=this._v1ImportRangeMap(a.rangeMapHorizontalOuter,l),h=this._v1ImportRangeMap(a.rangeMapVerticalDown,l),c=this._v1ImportRangeMap(a.rangeMapVerticalUp,l);let p;p="expression"===a.type?new me(r,u,d,h,c):new pe(t,u,d,h,c);const m=this._importLookAt(t,p);return m.offsetFromHeadBone.fromArray(null!==(s=a.offsetFromHeadBone)&&void 0!==s?s:[0,.06,0]),m}))}_v1ImportRangeMap(e,t){var r,i;return new fe(null!==(r=null==e?void 0:e.inputMaxValue)&&void 0!==r?r:90,null!==(i=null==e?void 0:e.outputScale)&&void 0!==i?i:t)}_v0Import(e,t,r){var i,n,s,a;return o(this,void 0,void 0,(function*(){const e=this.parser.json,o=null===(i=e.extensions)||void 0===i?void 0:i.VRM;if(!o)return null;const l=o.firstPerson;if(!l)return null;const u="BlendShape"===l.lookAtTypeName?1:10,d=this._v0ImportDegreeMap(l.lookAtHorizontalInner,u),h=this._v0ImportDegreeMap(l.lookAtHorizontalOuter,u),c=this._v0ImportDegreeMap(l.lookAtVerticalDown,u),p=this._v0ImportDegreeMap(l.lookAtVerticalUp,u);let m;m="BlendShape"===l.lookAtTypeName?new me(r,d,h,c,p):new pe(t,d,h,c,p);const f=this._importLookAt(t,m);return l.firstPersonBoneOffset?f.offsetFromHeadBone.set(null!==(n=l.firstPersonBoneOffset.x)&&void 0!==n?n:0,null!==(s=l.firstPersonBoneOffset.y)&&void 0!==s?s:.06,-(null!==(a=l.firstPersonBoneOffset.z)&&void 0!==a?a:0)):f.offsetFromHeadBone.set(0,.06,0),f.faceFront.set(0,0,-1),m instanceof pe&&m.faceFront.set(0,0,-1),f}))}_v0ImportDegreeMap(e,t){var r,i;const n=null==e?void 0:e.curve;return"[0,0,0,1,1,1,1,0]"!==JSON.stringify(n)&&console.warn("Curves of LookAtDegreeMap defined in VRM 0.0 are not supported"),new fe(null!==(r=null==e?void 0:e.xRange)&&void 0!==r?r:90,null!==(i=null==e?void 0:e.yRange)&&void 0!==i?i:t)}_importLookAt(e,t){const r=new le(e,t);if(this.helperRoot){const e=new q(r);this.helperRoot.add(e),e.renderOrder=this.helperRoot.renderOrder}return r}}class ve{constructor(e,t){var r,i,n;this.parser=e,this.needThumbnailImage=null===(r=null==t?void 0:t.needThumbnailImage)||void 0===r||r,this.acceptLicenseUrls=null!==(i=null==t?void 0:t.acceptLicenseUrls)&&void 0!==i?i:["https://vrm.dev/licenses/1.0/"],this.acceptV0Meta=null===(n=null==t?void 0:t.acceptV0Meta)||void 0===n||n}get name(){return"VRMMetaLoaderPlugin"}afterRoot(e){return o(this,void 0,void 0,(function*(){e.userData.vrmMeta=yield this._import(e)}))}_import(e){return o(this,void 0,void 0,(function*(){const t=yield this._v1Import(e);if(null!=t)return t;const r=yield this._v0Import(e);return null!=r?r:null}))}_v1Import(e){var t,r,i;return o(this,void 0,void 0,(function*(){const e=this.parser.json;if(!(-1!==(null===(t=e.extensionsUsed)||void 0===t?void 0:t.indexOf("VRMC_vrm"))))return null;const n=null===(r=e.extensions)||void 0===r?void 0:r.VRMC_vrm;if(null==n)return null;if("1.0-beta"!==n.specVersion)return null;const o=n.meta;if(!o)return null;const s=o.licenseUrl;if(!new Set(this.acceptLicenseUrls).has(s))throw new Error(`VRMMetaLoaderPlugin: The license url "${s}" is not accepted`);let a;return this.needThumbnailImage&&null!=o.thumbnailImage&&(a=null!==(i=yield this._extractGLTFImage(o.thumbnailImage))&&void 0!==i?i:void 0),{metaVersion:"1",name:o.name,version:o.version,authors:o.authors,copyrightInformation:o.copyrightInformation,contactInformation:o.contactInformation,references:o.references,thirdPartyLicenses:o.thirdPartyLicenses,thumbnailImage:a,licenseUrl:o.licenseUrl,avatarPermission:o.avatarPermission,allowExcessivelyViolentUsage:o.allowExcessivelyViolentUsage,allowExcessivelySexualUsage:o.allowExcessivelySexualUsage,commercialUsage:o.commercialUsage,allowPoliticalOrReligiousUsage:o.allowPoliticalOrReligiousUsage,allowAntisocialOrHateUsage:o.allowAntisocialOrHateUsage,creditNotation:o.creditNotation,allowRedistribution:o.allowRedistribution,modification:o.modification,otherLicenseUrl:o.otherLicenseUrl}}))}_v0Import(e){var t;return o(this,void 0,void 0,(function*(){const e=this.parser.json,r=null===(t=e.extensions)||void 0===t?void 0:t.VRM;if(!r)return null;const i=r.meta;if(!i)return null;if(!this.acceptV0Meta)throw new Error("VRMMetaLoaderPlugin: Attempted to load VRM0.0 meta but acceptV0Meta is false");let n;return this.needThumbnailImage&&null!=i.texture&&-1!==i.texture&&(n=yield this.parser.getDependency("texture",i.texture)),{metaVersion:"0",allowedUserName:i.allowedUserName,author:i.author,commercialUssageName:i.commercialUssageName,contactInformation:i.contactInformation,licenseName:i.licenseName,otherLicenseUrl:i.otherLicenseUrl,otherPermissionUrl:i.otherPermissionUrl,reference:i.reference,sexualUssageName:i.sexualUssageName,texture:null!=n?n:void 0,title:i.title,version:i.version,violentUssageName:i.violentUssageName}}))}_extractGLTFImage(e){var t;return o(this,void 0,void 0,(function*(){const r=this.parser.json,n=null===(t=r.images)||void 0===t?void 0:t[e];if(null==n)return console.warn(`VRMMetaLoaderPlugin: Attempt to use images[${e}] of glTF as a thumbnail but the image doesn't exist`),null;let o=n.uri;if(null!=n.bufferView){const e=yield this.parser.getDependency("bufferView",n.bufferView),t=new Blob([e],{type:n.mimeType});o=URL.createObjectURL(t)}if(null==o)return console.warn(`VRMMetaLoaderPlugin: Attempt to use images[${e}] of glTF as a thumbnail but the image couldn't load properly`),null;const s=new i.ImageLoader;return yield s.loadAsync((a=o,l=this.parser.options.path,"string"!=typeof a||""===a?"":(/^https?:\/\//i.test(l)&&/^\//.test(a)&&(l=l.replace(/(^https?:\/\/[^/]+).*/i,"$1")),/^(https?:)?\/\//i.test(a)||/^data:.*,.*$/i.test(a)||/^blob:.*$/i.test(a)?a:l+a))).catch((e=>(console.error(e),console.warn("VRMMetaLoaderPlugin: Failed to load a thumbnail image"),null)));var a,l}))}}class _e{constructor(e){this.scene=e.scene,this.meta=e.meta,this.humanoid=e.humanoid,this.expressionManager=e.expressionManager,this.firstPerson=e.firstPerson,this.lookAt=e.lookAt}update(e){this.humanoid.update(),this.lookAt&&this.lookAt.update(e),this.expressionManager&&this.expressionManager.update()}}class Me extends _e{constructor(e){super(e),this.materials=e.materials,this.springBoneManager=e.springBoneManager,this.nodeConstraintManager=e.nodeConstraintManager}update(e){super.update(e),this.nodeConstraintManager&&this.nodeConstraintManager.update(),this.springBoneManager&&this.springBoneManager.update(e),this.materials&&this.materials.forEach((t=>{t.update&&t.update(e)}))}}
/*! *****************************************************************************
    Copyright (c) Microsoft Corporation.

    Permission to use, copy, modify, and/or distribute this software for any
    purpose with or without fee is hereby granted.

    THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES WITH
    REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF MERCHANTABILITY
    AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY SPECIAL, DIRECT,
    INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES WHATSOEVER RESULTING FROM
    LOSS OF USE, DATA OR PROFITS, WHETHER IN AN ACTION OF CONTRACT, NEGLIGENCE OR
    OTHER TORTIOUS ACTION, ARISING OUT OF OR IN CONNECTION WITH THE USE OR
    PERFORMANCE OF THIS SOFTWARE.
    ***************************************************************************** */function xe(e,t,r,i){return new(r||(r=Promise))((function(n,o){function s(e){try{l(i.next(e))}catch(e){o(e)}}function a(e){try{l(i.throw(e))}catch(e){o(e)}}function l(e){var t;e.done?n(e.value):(t=e.value,t instanceof r?t:new r((function(e){e(t)}))).then(s,a)}l((i=i.apply(e,t||[])).next())}))}
/*!
     * @pixiv/three-vrm-materials-mtoon v1.0.0-beta.19
     * MToon (toon material) module for @pixiv/three-vrm
     *
     * Copyright (c) 2020-2021 pixiv Inc.
     * @pixiv/three-vrm-materials-mtoon is distributed under MIT License
     * https://github.com/pixiv/three-vrm/blob/release/LICENSE
     */
/*! *****************************************************************************
    Copyright (c) Microsoft Corporation.

    Permission to use, copy, modify, and/or distribute this software for any
    purpose with or without fee is hereby granted.

    THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES WITH
    REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF MERCHANTABILITY
    AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY SPECIAL, DIRECT,
    INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES WHATSOEVER RESULTING FROM
    LOSS OF USE, DATA OR PROFITS, WHETHER IN AN ACTION OF CONTRACT, NEGLIGENCE OR
    OTHER TORTIOUS ACTION, ARISING OUT OF OR IN CONNECTION WITH THE USE OR
    PERFORMANCE OF THIS SOFTWARE.
    ***************************************************************************** */function ye(e,t,r,i){return new(r||(r=Promise))((function(n,o){function s(e){try{l(i.next(e))}catch(e){o(e)}}function a(e){try{l(i.throw(e))}catch(e){o(e)}}function l(e){var t;e.done?n(e.value):(t=e.value,t instanceof r?t:new r((function(e){e(t)}))).then(s,a)}l((i=i.apply(e,t||[])).next())}))}const Re={None:"none",Normal:"normal",LitShadeRate:"litShadeRate",UV:"uv"},Te={None:"none",WorldCoordinates:"worldCoordinates",ScreenCoordinates:"screenCoordinates"},we=(e,t)=>{const r=(e=>{if(parseInt(i.REVISION,10)>=136)switch(e){case i.LinearEncoding:return["Linear","( value )"];case i.sRGBEncoding:return["sRGB","( value )"];default:return console.warn("THREE.WebGLProgram: Unsupported encoding:",e),["Linear","( value )"]}else switch(e){case i.LinearEncoding:return["Linear","( value )"];case i.sRGBEncoding:return["sRGB","( value )"];case 3002:return["RGBE","( value )"];case 3004:return["RGBM","( value, 7.0 )"];case 3005:return["RGBM","( value, 16.0 )"];case 3006:return["RGBD","( value, 256.0 )"];case 3007:return["Gamma","( value, float( GAMMA_FACTOR ) )"];default:throw new Error("unsupported encoding: "+e)}})(t);return"vec4 "+e+"( vec4 value ) { return "+r[0]+"ToLinear"+r[1]+"; }"};function Ee(e,t){let r;return r=e&&e.isTexture?e.encoding:i.LinearEncoding,parseInt(i.REVISION,10)>=133&&t&&e&&e.isTexture&&e.format===i.RGBAFormat&&e.type===i.UnsignedByteType&&e.encoding===i.sRGBEncoding&&(r=i.LinearEncoding),r}class Pe extends i.ShaderMaterial{constructor(e={}){super({vertexShader:"// #define PHONG\r\n\r\nvarying vec3 vViewPosition;\r\n\r\n#ifndef FLAT_SHADED\r\n  varying vec3 vNormal;\r\n#endif\r\n\r\n#include <common>\r\n\r\n// #include <uv_pars_vertex>\r\n#ifdef MTOON_USE_UV\r\n  varying vec2 vUv;\r\n  uniform mat3 uvTransform;\r\n#endif\r\n\r\n#include <uv2_pars_vertex>\r\n// #include <displacementmap_pars_vertex>\r\n// #include <envmap_pars_vertex>\r\n#include <color_pars_vertex>\r\n#include <fog_pars_vertex>\r\n#include <morphtarget_pars_vertex>\r\n#include <skinning_pars_vertex>\r\n#include <shadowmap_pars_vertex>\r\n#include <logdepthbuf_pars_vertex>\r\n#include <clipping_planes_pars_vertex>\r\n\r\n#ifdef USE_OUTLINEWIDTHMULTIPLYTEXTURE\r\n  uniform sampler2D outlineWidthMultiplyTexture;\r\n  uniform mat3 outlineWidthMultiplyTextureUvTransform;\r\n#endif\r\n\r\nuniform float outlineWidthFactor;\r\n\r\nvoid main() {\r\n\r\n  // #include <uv_vertex>\r\n  #ifdef MTOON_USE_UV\r\n    vUv = ( uvTransform * vec3( uv, 1 ) ).xy;\r\n  #endif\r\n\r\n  #include <uv2_vertex>\r\n  #include <color_vertex>\r\n\r\n  #include <beginnormal_vertex>\r\n  #include <morphnormal_vertex>\r\n  #include <skinbase_vertex>\r\n  #include <skinnormal_vertex>\r\n\r\n  // we need this to compute the outline properly\r\n  objectNormal = normalize( objectNormal );\r\n\r\n  #include <defaultnormal_vertex>\r\n\r\n  #ifndef FLAT_SHADED // Normal computed with derivatives when FLAT_SHADED\r\n    vNormal = normalize( transformedNormal );\r\n  #endif\r\n\r\n  #include <begin_vertex>\r\n\r\n  #include <morphtarget_vertex>\r\n  #include <skinning_vertex>\r\n  // #include <displacementmap_vertex>\r\n  #include <project_vertex>\r\n  #include <logdepthbuf_vertex>\r\n  #include <clipping_planes_vertex>\r\n\r\n  vViewPosition = - mvPosition.xyz;\r\n\r\n  float outlineTex = 1.0;\r\n\r\n  #ifdef OUTLINE\r\n    #ifdef USE_OUTLINEWIDTHMULTIPLYTEXTURE\r\n      vec2 outlineWidthMultiplyTextureUv = ( outlineWidthMultiplyTextureUvTransform * vec3( vUv, 1 ) ).xy;\r\n      outlineTex = texture2D( outlineWidthMultiplyTexture, outlineWidthMultiplyTextureUv ).g;\r\n    #endif\r\n\r\n    #ifdef OUTLINE_WIDTH_WORLD\r\n      float worldNormalLength = length( transformedNormal );\r\n      vec3 outlineOffset = outlineWidthFactor * outlineTex * worldNormalLength * objectNormal;\r\n      gl_Position = projectionMatrix * modelViewMatrix * vec4( outlineOffset + transformed, 1.0 );\r\n    #endif\r\n\r\n    #ifdef OUTLINE_WIDTH_SCREEN\r\n      vec3 clipNormal = ( projectionMatrix * modelViewMatrix * vec4( objectNormal, 0.0 ) ).xyz;\r\n      vec2 projectedNormal = normalize( clipNormal.xy );\r\n      projectedNormal.x *= projectionMatrix[ 0 ].x / projectionMatrix[ 1 ].y;\r\n      gl_Position.xy += 2.0 * outlineWidthFactor * outlineTex * projectedNormal.xy;\r\n    #endif\r\n\r\n    gl_Position.z += 1E-6 * gl_Position.w; // anti-artifact magic\r\n  #endif\r\n\r\n  #include <worldpos_vertex>\r\n  // #include <envmap_vertex>\r\n  #include <shadowmap_vertex>\r\n  #include <fog_vertex>\r\n\r\n}",fragmentShader:'// #define PHONG\r\n\r\nuniform vec3 litFactor;\r\n\r\nuniform float opacity;\r\n\r\nuniform vec3 shadeColorFactor;\r\n#ifdef USE_SHADEMULTIPLYTEXTURE\r\n  uniform sampler2D shadeMultiplyTexture;\r\n  uniform mat3 shadeMultiplyTextureUvTransform;\r\n#endif\r\n\r\nuniform float shadingShiftFactor;\r\nuniform float shadingToonyFactor;\r\n\r\n#ifdef USE_SHADINGSHIFTTEXTURE\r\n  uniform sampler2D shadingShiftTexture;\r\n  uniform mat3 shadingShiftTextureUvTransform;\r\n  uniform float shadingShiftTextureScale;\r\n#endif\r\n\r\nuniform float giEqualizationFactor;\r\n\r\nuniform vec3 parametricRimColorFactor;\r\n#ifdef USE_RIMMULTIPLYTEXTURE\r\n  uniform sampler2D rimMultiplyTexture;\r\n  uniform mat3 rimMultiplyTextureUvTransform;\r\n#endif\r\nuniform float rimLightingMixFactor;\r\nuniform float parametricRimFresnelPowerFactor;\r\nuniform float parametricRimLiftFactor;\r\n\r\n#ifdef USE_MATCAPTEXTURE\r\n  uniform vec3 matcapFactor;\r\n  uniform sampler2D matcapTexture;\r\n  uniform mat3 matcapTextureUvTransform;\r\n#endif\r\n\r\nuniform vec3 emissive;\r\nuniform float emissiveIntensity;\r\n\r\nuniform vec3 outlineColorFactor;\r\nuniform float outlineLightingMixFactor;\r\n\r\n#ifdef USE_UVANIMATIONMASKTEXTURE\r\n  uniform sampler2D uvAnimationMaskTexture;\r\n  uniform mat3 uvAnimationMaskTextureUvTransform;\r\n#endif\r\n\r\nuniform float uvAnimationScrollXOffset;\r\nuniform float uvAnimationScrollYOffset;\r\nuniform float uvAnimationRotationPhase;\r\n\r\n#include <common>\r\n#include <packing>\r\n#include <dithering_pars_fragment>\r\n#include <color_pars_fragment>\r\n\r\n// #include <uv_pars_fragment>\r\n#if ( defined( MTOON_USE_UV ) && !defined( MTOON_UVS_VERTEX_ONLY ) )\r\n  varying vec2 vUv;\r\n#endif\r\n\r\n#include <uv2_pars_fragment>\r\n#include <map_pars_fragment>\r\n\r\n#ifdef USE_MAP\r\n  uniform mat3 mapUvTransform;\r\n#endif\r\n\r\n// #include <alphamap_pars_fragment>\r\n\r\n#if THREE_VRM_THREE_REVISION >= 132\r\n  #include <alphatest_pars_fragment>\r\n#endif\r\n\r\n#include <aomap_pars_fragment>\r\n// #include <lightmap_pars_fragment>\r\n#include <emissivemap_pars_fragment>\r\n\r\n#ifdef USE_EMISSIVEMAP\r\n  uniform mat3 emissiveMapUvTransform;\r\n#endif\r\n\r\n// #include <envmap_common_pars_fragment>\r\n// #include <envmap_pars_fragment>\r\n// #include <cube_uv_reflection_fragment>\r\n#include <fog_pars_fragment>\r\n\r\n// #include <bsdfs>\r\nvec3 BRDF_Lambert( const in vec3 diffuseColor ) {\r\n  return RECIPROCAL_PI * diffuseColor;\r\n}\r\n\r\n#include <lights_pars_begin>\r\n\r\n#if THREE_VRM_THREE_REVISION >= 132\r\n  #include <normal_pars_fragment>\r\n#endif\r\n\r\n// #include <lights_phong_pars_fragment>\r\nvarying vec3 vViewPosition;\r\n\r\n#if THREE_VRM_THREE_REVISION < 132\r\n  #ifndef FLAT_SHADED\r\n    varying vec3 vNormal;\r\n  #endif\r\n#endif\r\n\r\nstruct MToonMaterial {\r\n  vec3 diffuseColor;\r\n  vec3 shadeColor;\r\n  float shadingShift;\r\n};\r\n\r\nfloat linearstep( float a, float b, float t ) {\r\n  return clamp( ( t - a ) / ( b - a ), 0.0, 1.0 );\r\n}\r\n\r\n/**\r\n * Convert NdotL into toon shading factor using shadingShift and shadingToony\r\n */\r\nfloat getShading(\r\n  const in float dotNL,\r\n  const in float shadow,\r\n  const in float shadingShift\r\n) {\r\n  float shading = dotNL;\r\n  shading = shading + shadingShift;\r\n  shading = linearstep( -1.0 + shadingToonyFactor, 1.0 - shadingToonyFactor, shading );\r\n  shading *= shadow;\r\n  return shading;\r\n}\r\n\r\n/**\r\n * Mix diffuseColor and shadeColor using shading factor and light color\r\n */\r\nvec3 getDiffuse(\r\n  const in MToonMaterial material,\r\n  const in float shading,\r\n  in vec3 lightColor\r\n) {\r\n  #ifdef DEBUG_LITSHADERATE\r\n    return vec3( BRDF_Lambert( shading * lightColor ) );\r\n  #endif\r\n\r\n  #if THREE_VRM_THREE_REVISION < 132\r\n    #ifndef PHYSICALLY_CORRECT_LIGHTS\r\n      lightColor *= PI;\r\n    #endif\r\n  #endif\r\n\r\n  vec3 col = lightColor * BRDF_Lambert( mix( material.shadeColor, material.diffuseColor, shading ) );\r\n\r\n  // The "comment out if you want to PBR absolutely" line\r\n  #ifdef V0_COMPAT_SHADE\r\n    col = min( col, material.diffuseColor );\r\n  #endif\r\n\r\n  return col;\r\n}\r\n\r\nvoid RE_Direct_MToon( const in IncidentLight directLight, const in GeometricContext geometry, const in MToonMaterial material, const in float shadow, inout ReflectedLight reflectedLight ) {\r\n  float dotNL = saturate( dot( geometry.normal, directLight.direction ) );\r\n  vec3 irradiance = directLight.color;\r\n\r\n  #if THREE_VRM_THREE_REVISION < 132\r\n    #ifndef PHYSICALLY_CORRECT_LIGHTS\r\n      irradiance *= PI;\r\n    #endif\r\n  #endif\r\n\r\n  // directSpecular will be used for rim lighting, not an actual specular\r\n  reflectedLight.directSpecular += irradiance;\r\n\r\n  irradiance *= dotNL;\r\n\r\n  float shading = getShading( dotNL, shadow, material.shadingShift );\r\n\r\n  // toon shaded diffuse\r\n  reflectedLight.directDiffuse += getDiffuse( material, shading, directLight.color );\r\n}\r\n\r\nvoid RE_IndirectDiffuse_MToon( const in vec3 irradiance, const in GeometricContext geometry, const in MToonMaterial material, inout ReflectedLight reflectedLight ) {\r\n  // indirect diffuse will use diffuseColor, no shadeColor involved\r\n  reflectedLight.indirectDiffuse += irradiance * BRDF_Lambert( material.diffuseColor );\r\n\r\n  // directSpecular will be used for rim lighting, not an actual specular\r\n  reflectedLight.directSpecular += irradiance;\r\n}\r\n\r\n#define RE_Direct RE_Direct_MToon\r\n#define RE_IndirectDiffuse RE_IndirectDiffuse_MToon\r\n#define Material_LightProbeLOD( material ) (0)\r\n\r\n#include <shadowmap_pars_fragment>\r\n// #include <bumpmap_pars_fragment>\r\n\r\n// #include <normalmap_pars_fragment>\r\n#ifdef USE_NORMALMAP\r\n\r\n  uniform sampler2D normalMap;\r\n  uniform mat3 normalMapUvTransform;\r\n  uniform vec2 normalScale;\r\n\r\n#endif\r\n\r\n#ifdef OBJECTSPACE_NORMALMAP\r\n\r\n  uniform mat3 normalMatrix;\r\n\r\n#endif\r\n\r\n#if ! defined ( USE_TANGENT ) && defined ( TANGENTSPACE_NORMALMAP )\r\n\r\n  // Per-Pixel Tangent Space Normal Mapping\r\n  // http://hacksoflife.blogspot.ch/2009/11/per-pixel-tangent-space-normal-mapping.html\r\n\r\n  // three-vrm specific change: it requires `uv` as an input in order to support uv scrolls\r\n\r\n  // Temporary compat against shader change @ Three.js r126\r\n  // See: #21205, #21307, #21299\r\n  #if THREE_VRM_THREE_REVISION >= 126\r\n\r\n    vec3 perturbNormal2Arb( vec2 uv, vec3 eye_pos, vec3 surf_norm, vec3 mapN, float faceDirection ) {\r\n\r\n      vec3 q0 = vec3( dFdx( eye_pos.x ), dFdx( eye_pos.y ), dFdx( eye_pos.z ) );\r\n      vec3 q1 = vec3( dFdy( eye_pos.x ), dFdy( eye_pos.y ), dFdy( eye_pos.z ) );\r\n      vec2 st0 = dFdx( uv.st );\r\n      vec2 st1 = dFdy( uv.st );\r\n\r\n      vec3 N = normalize( surf_norm );\r\n\r\n      vec3 q1perp = cross( q1, N );\r\n      vec3 q0perp = cross( N, q0 );\r\n\r\n      vec3 T = q1perp * st0.x + q0perp * st1.x;\r\n      vec3 B = q1perp * st0.y + q0perp * st1.y;\r\n\r\n      // three-vrm specific change: Workaround for the issue that happens when delta of uv = 0.0\r\n      // TODO: Is this still required? Or shall I make a PR about it?\r\n      if ( length( T ) == 0.0 || length( B ) == 0.0 ) {\r\n        return surf_norm;\r\n      }\r\n\r\n      float det = max( dot( T, T ), dot( B, B ) );\r\n      float scale = ( det == 0.0 ) ? 0.0 : faceDirection * inversesqrt( det );\r\n\r\n      return normalize( T * ( mapN.x * scale ) + B * ( mapN.y * scale ) + N * mapN.z );\r\n\r\n    }\r\n\r\n  #else\r\n\r\n    vec3 perturbNormal2Arb( vec2 uv, vec3 eye_pos, vec3 surf_norm, vec3 mapN ) {\r\n\r\n      // Workaround for Adreno 3XX dFd*( vec3 ) bug. See #9988\r\n\r\n      vec3 q0 = vec3( dFdx( eye_pos.x ), dFdx( eye_pos.y ), dFdx( eye_pos.z ) );\r\n      vec3 q1 = vec3( dFdy( eye_pos.x ), dFdy( eye_pos.y ), dFdy( eye_pos.z ) );\r\n      vec2 st0 = dFdx( uv.st );\r\n      vec2 st1 = dFdy( uv.st );\r\n\r\n      float scale = sign( st1.t * st0.s - st0.t * st1.s ); // we do not care about the magnitude\r\n\r\n      vec3 S = ( q0 * st1.t - q1 * st0.t ) * scale;\r\n      vec3 T = ( - q0 * st1.s + q1 * st0.s ) * scale;\r\n\r\n      // three-vrm specific change: Workaround for the issue that happens when delta of uv = 0.0\r\n      // TODO: Is this still required? Or shall I make a PR about it?\r\n\r\n      if ( length( S ) == 0.0 || length( T ) == 0.0 ) {\r\n        return surf_norm;\r\n      }\r\n\r\n      S = normalize( S );\r\n      T = normalize( T );\r\n      vec3 N = normalize( surf_norm );\r\n\r\n      #ifdef DOUBLE_SIDED\r\n\r\n        // Workaround for Adreno GPUs gl_FrontFacing bug. See #15850 and #10331\r\n\r\n        bool frontFacing = dot( cross( S, T ), N ) > 0.0;\r\n\r\n        mapN.xy *= ( float( frontFacing ) * 2.0 - 1.0 );\r\n\r\n      #else\r\n\r\n        mapN.xy *= ( float( gl_FrontFacing ) * 2.0 - 1.0 );\r\n\r\n      #endif\r\n\r\n      mat3 tsn = mat3( S, T, N );\r\n      return normalize( tsn * mapN );\r\n\r\n    }\r\n\r\n  #endif\r\n\r\n#endif\r\n\r\n// #include <specularmap_pars_fragment>\r\n#include <logdepthbuf_pars_fragment>\r\n#include <clipping_planes_pars_fragment>\r\n\r\n// == post correction ==========================================================\r\nvoid postCorrection() {\r\n  #include <tonemapping_fragment>\r\n  #include <encodings_fragment>\r\n  #include <fog_fragment>\r\n  #include <premultiplied_alpha_fragment>\r\n  #include <dithering_fragment>\r\n}\r\n\r\n// == main procedure ===========================================================\r\nvoid main() {\r\n  #include <clipping_planes_fragment>\r\n\r\n  vec2 uv = vec2(0.5, 0.5);\r\n\r\n  #if ( defined( MTOON_USE_UV ) && !defined( MTOON_UVS_VERTEX_ONLY ) )\r\n    uv = vUv;\r\n\r\n    float uvAnimMask = 1.0;\r\n    #ifdef USE_UVANIMATIONMASKTEXTURE\r\n      vec2 uvAnimationMaskTextureUv = ( uvAnimationMaskTextureUvTransform * vec3( uv, 1 ) ).xy;\r\n      uvAnimMask = texture2D( uvAnimationMaskTexture, uvAnimationMaskTextureUv ).b;\r\n    #endif\r\n\r\n    uv = uv + vec2( uvAnimationScrollXOffset, uvAnimationScrollYOffset ) * uvAnimMask;\r\n    float uvRotCos = cos( uvAnimationRotationPhase * uvAnimMask );\r\n    float uvRotSin = sin( uvAnimationRotationPhase * uvAnimMask );\r\n    uv = mat2( uvRotCos, uvRotSin, -uvRotSin, uvRotCos ) * ( uv - 0.5 ) + 0.5;\r\n  #endif\r\n\r\n  #ifdef DEBUG_UV\r\n    gl_FragColor = vec4( 0.0, 0.0, 0.0, 1.0 );\r\n    #if ( defined( MTOON_USE_UV ) && !defined( MTOON_UVS_VERTEX_ONLY ) )\r\n      gl_FragColor = vec4( uv, 0.0, 1.0 );\r\n    #endif\r\n    return;\r\n  #endif\r\n\r\n  vec4 diffuseColor = vec4( litFactor, opacity );\r\n  ReflectedLight reflectedLight = ReflectedLight( vec3( 0.0 ), vec3( 0.0 ), vec3( 0.0 ), vec3( 0.0 ) );\r\n  vec3 totalEmissiveRadiance = emissive * emissiveIntensity;\r\n\r\n  #include <logdepthbuf_fragment>\r\n\r\n  // #include <map_fragment>\r\n  #ifdef USE_MAP\r\n    vec2 mapUv = ( mapUvTransform * vec3( uv, 1 ) ).xy;\r\n    #if THREE_VRM_THREE_REVISION >= 137\r\n      vec4 sampledDiffuseColor = texture2D( map, mapUv );\r\n      #ifdef DECODE_VIDEO_TEXTURE\r\n        sampledDiffuseColor = vec4( mix( pow( sampledDiffuseColor.rgb * 0.9478672986 + vec3( 0.0521327014 ), vec3( 2.4 ) ), sampledDiffuseColor.rgb * 0.0773993808, vec3( lessThanEqual( sampledDiffuseColor.rgb, vec3( 0.04045 ) ) ) ), sampledDiffuseColor.w );\r\n      #endif\r\n      diffuseColor *= sampledDiffuseColor;\r\n    #else\r\n      // COMPAT: pre-r137\r\n      vec4 texelColor = texture2D( map, mapUv );\r\n      texelColor = mapTexelToLinear( texelColor );\r\n      diffuseColor *= texelColor;\r\n    #endif\r\n  #endif\r\n\r\n  // #include <color_fragment>\r\n  #if ( defined( USE_COLOR ) && !defined( IGNORE_VERTEX_COLOR ) )\r\n    diffuseColor.rgb *= vColor;\r\n  #endif\r\n\r\n  // #include <alphamap_fragment>\r\n\r\n  #include <alphatest_fragment>\r\n\r\n  // #include <specularmap_fragment>\r\n  #include <normal_fragment_begin>\r\n\r\n  #ifdef OUTLINE\r\n    normal *= -1.0;\r\n  #endif\r\n\r\n  // #include <normal_fragment_maps>\r\n\r\n  #ifdef OBJECTSPACE_NORMALMAP\r\n\r\n    vec2 normalMapUv = ( normalMapUvTransform * vec3( uv, 1 ) ).xy;\r\n    normal = texture2D( normalMap, normalMapUv ).xyz * 2.0 - 1.0; // overrides both flatShading and attribute normals\r\n\r\n    #ifdef FLIP_SIDED\r\n\r\n      normal = - normal;\r\n\r\n    #endif\r\n\r\n    #ifdef DOUBLE_SIDED\r\n\r\n      // Temporary compat against shader change @ Three.js r126\r\n      // See: #21205, #21307, #21299\r\n      #if THREE_VRM_THREE_REVISION >= 126\r\n\r\n        normal = normal * faceDirection;\r\n\r\n      #else\r\n\r\n        normal = normal * ( float( gl_FrontFacing ) * 2.0 - 1.0 );\r\n\r\n      #endif\r\n\r\n    #endif\r\n\r\n    normal = normalize( normalMatrix * normal );\r\n\r\n  #elif defined( TANGENTSPACE_NORMALMAP )\r\n\r\n    vec2 normalMapUv = ( normalMapUvTransform * vec3( uv, 1 ) ).xy;\r\n    vec3 mapN = texture2D( normalMap, normalMapUv ).xyz * 2.0 - 1.0;\r\n    mapN.xy *= normalScale;\r\n\r\n    #ifdef USE_TANGENT\r\n\r\n      normal = normalize( vTBN * mapN );\r\n\r\n    #else\r\n\r\n      // Temporary compat against shader change @ Three.js r126\r\n      // See: #21205, #21307, #21299\r\n      #if THREE_VRM_THREE_REVISION >= 126\r\n\r\n        normal = perturbNormal2Arb( uv, -vViewPosition, normal, mapN, faceDirection );\r\n\r\n      #else\r\n\r\n        normal = perturbNormal2Arb( uv, -vViewPosition, normal, mapN );\r\n\r\n      #endif\r\n\r\n    #endif\r\n\r\n  #endif\r\n\r\n  // #include <emissivemap_fragment>\r\n  #ifdef USE_EMISSIVEMAP\r\n    vec2 emissiveMapUv = ( emissiveMapUvTransform * vec3( uv, 1 ) ).xy;\r\n    #if THREE_VRM_THREE_REVISION >= 137\r\n      totalEmissiveRadiance *= texture2D( emissiveMap, emissiveMapUv ).rgb;\r\n    #else\r\n      // COMPAT: pre-r137\r\n      totalEmissiveRadiance *= emissiveMapTexelToLinear( texture2D( emissiveMap, emissiveMapUv ) ).rgb;\r\n    #endif\r\n  #endif\r\n\r\n  #ifdef DEBUG_NORMAL\r\n    gl_FragColor = vec4( 0.5 + 0.5 * normal, 1.0 );\r\n    return;\r\n  #endif\r\n\r\n  // -- MToon: lighting --------------------------------------------------------\r\n  // accumulation\r\n  // #include <lights_phong_fragment>\r\n  MToonMaterial material;\r\n\r\n  material.diffuseColor = diffuseColor.rgb;\r\n\r\n  material.shadeColor = shadeColorFactor;\r\n  #ifdef USE_SHADEMULTIPLYTEXTURE\r\n    vec2 shadeMultiplyTextureUv = ( shadeMultiplyTextureUvTransform * vec3( uv, 1 ) ).xy;\r\n    #if THREE_VRM_THREE_REVISION >= 137\r\n      material.shadeColor *= texture2D( shadeMultiplyTexture, shadeMultiplyTextureUv ).rgb;\r\n    #else\r\n      // COMPAT: pre-r137\r\n      material.shadeColor *= shadeMultiplyTextureTexelToLinear( texture2D( shadeMultiplyTexture, shadeMultiplyTextureUv) ).rgb;\r\n    #endif\r\n  #endif\r\n\r\n  #if ( defined( USE_COLOR ) && !defined( IGNORE_VERTEX_COLOR ) )\r\n    material.shadeColor.rgb *= vColor;\r\n  #endif\r\n\r\n  material.shadingShift = shadingShiftFactor;\r\n  #ifdef USE_SHADINGSHIFTTEXTURE\r\n    vec2 shadingShiftTextureUv = ( shadingShiftTextureUvTransform * vec3( uv, 1 ) ).xy;\r\n    material.shadingShift += texture2D( shadingShiftTexture, shadingShiftTextureUv ).r * shadingShiftTextureScale;\r\n  #endif\r\n\r\n  // #include <lights_fragment_begin>\r\n\r\n  // MToon Specific changes:\r\n  // Since we want to take shadows into account of shading instead of irradiance,\r\n  // we had to modify the codes that multiplies the results of shadowmap into color of direct lights.\r\n\r\n  GeometricContext geometry;\r\n\r\n  geometry.position = - vViewPosition;\r\n  geometry.normal = normal;\r\n  geometry.viewDir = ( isOrthographic ) ? vec3( 0, 0, 1 ) : normalize( vViewPosition );\r\n\r\n  #ifdef CLEARCOAT\r\n\r\n    geometry.clearcoatNormal = clearcoatNormal;\r\n\r\n  #endif\r\n\r\n  IncidentLight directLight;\r\n\r\n  // since these variables will be used in unrolled loop, we have to define in prior\r\n  float shadow;\r\n\r\n  #if ( NUM_POINT_LIGHTS > 0 ) && defined( RE_Direct )\r\n\r\n    PointLight pointLight;\r\n    #if defined( USE_SHADOWMAP ) && NUM_POINT_LIGHT_SHADOWS > 0\r\n    PointLightShadow pointLightShadow;\r\n    #endif\r\n\r\n    #pragma unroll_loop_start\r\n    for ( int i = 0; i < NUM_POINT_LIGHTS; i ++ ) {\r\n\r\n      pointLight = pointLights[ i ];\r\n\r\n      #if THREE_VRM_THREE_REVISION >= 132\r\n        getPointLightInfo( pointLight, geometry, directLight );\r\n      #else\r\n        getPointDirectLightIrradiance( pointLight, geometry, directLight );\r\n      #endif\r\n\r\n      shadow = 1.0;\r\n      #if defined( USE_SHADOWMAP ) && ( UNROLLED_LOOP_INDEX < NUM_POINT_LIGHT_SHADOWS )\r\n      pointLightShadow = pointLightShadows[ i ];\r\n      shadow = all( bvec2( directLight.visible, receiveShadow ) ) ? getPointShadow( pointShadowMap[ i ], pointLightShadow.shadowMapSize, pointLightShadow.shadowBias, pointLightShadow.shadowRadius, vPointShadowCoord[ i ], pointLightShadow.shadowCameraNear, pointLightShadow.shadowCameraFar ) : 1.0;\r\n      #endif\r\n\r\n      RE_Direct( directLight, geometry, material, shadow, reflectedLight );\r\n\r\n    }\r\n    #pragma unroll_loop_end\r\n\r\n  #endif\r\n\r\n  #if ( NUM_SPOT_LIGHTS > 0 ) && defined( RE_Direct )\r\n\r\n    SpotLight spotLight;\r\n    #if defined( USE_SHADOWMAP ) && NUM_SPOT_LIGHT_SHADOWS > 0\r\n    SpotLightShadow spotLightShadow;\r\n    #endif\r\n\r\n    #pragma unroll_loop_start\r\n    for ( int i = 0; i < NUM_SPOT_LIGHTS; i ++ ) {\r\n\r\n      spotLight = spotLights[ i ];\r\n\r\n      #if THREE_VRM_THREE_REVISION >= 132\r\n        getSpotLightInfo( spotLight, geometry, directLight );\r\n      #else\r\n        getSpotDirectLightIrradiance( spotLight, geometry, directLight );\r\n      #endif\r\n\r\n      shadow = 1.0;\r\n      #if defined( USE_SHADOWMAP ) && ( UNROLLED_LOOP_INDEX < NUM_SPOT_LIGHT_SHADOWS )\r\n      spotLightShadow = spotLightShadows[ i ];\r\n      shadow = all( bvec2( directLight.visible, receiveShadow ) ) ? getShadow( spotShadowMap[ i ], spotLightShadow.shadowMapSize, spotLightShadow.shadowBias, spotLightShadow.shadowRadius, vSpotShadowCoord[ i ] ) : 1.0;\r\n      #endif\r\n\r\n      RE_Direct( directLight, geometry, material, shadow, reflectedLight );\r\n\r\n    }\r\n    #pragma unroll_loop_end\r\n\r\n  #endif\r\n\r\n  #if ( NUM_DIR_LIGHTS > 0 ) && defined( RE_Direct )\r\n\r\n    DirectionalLight directionalLight;\r\n    #if defined( USE_SHADOWMAP ) && NUM_DIR_LIGHT_SHADOWS > 0\r\n    DirectionalLightShadow directionalLightShadow;\r\n    #endif\r\n\r\n    #pragma unroll_loop_start\r\n    for ( int i = 0; i < NUM_DIR_LIGHTS; i ++ ) {\r\n\r\n      directionalLight = directionalLights[ i ];\r\n\r\n      #if THREE_VRM_THREE_REVISION >= 132\r\n        getDirectionalLightInfo( directionalLight, geometry, directLight );\r\n      #else\r\n        getDirectionalDirectLightIrradiance( directionalLight, geometry, directLight );\r\n      #endif\r\n\r\n      shadow = 1.0;\r\n      #if defined( USE_SHADOWMAP ) && ( UNROLLED_LOOP_INDEX < NUM_DIR_LIGHT_SHADOWS )\r\n      directionalLightShadow = directionalLightShadows[ i ];\r\n      shadow = all( bvec2( directLight.visible, receiveShadow ) ) ? getShadow( directionalShadowMap[ i ], directionalLightShadow.shadowMapSize, directionalLightShadow.shadowBias, directionalLightShadow.shadowRadius, vDirectionalShadowCoord[ i ] ) : 1.0;\r\n      #endif\r\n\r\n      RE_Direct( directLight, geometry, material, shadow, reflectedLight );\r\n\r\n    }\r\n    #pragma unroll_loop_end\r\n\r\n  #endif\r\n\r\n  // #if ( NUM_RECT_AREA_LIGHTS > 0 ) && defined( RE_Direct_RectArea )\r\n\r\n  //   RectAreaLight rectAreaLight;\r\n\r\n  //   #pragma unroll_loop_start\r\n  //   for ( int i = 0; i < NUM_RECT_AREA_LIGHTS; i ++ ) {\r\n\r\n  //     rectAreaLight = rectAreaLights[ i ];\r\n  //     RE_Direct_RectArea( rectAreaLight, geometry, material, reflectedLight );\r\n\r\n  //   }\r\n  //   #pragma unroll_loop_end\r\n\r\n  // #endif\r\n\r\n  #if defined( RE_IndirectDiffuse )\r\n\r\n    vec3 iblIrradiance = vec3( 0.0 );\r\n\r\n    vec3 irradiance = getAmbientLightIrradiance( ambientLightColor );\r\n\r\n    #if THREE_VRM_THREE_REVISION >= 133\r\n      irradiance += getLightProbeIrradiance( lightProbe, geometry.normal );\r\n    #else\r\n      irradiance += getLightProbeIrradiance( lightProbe, geometry );\r\n    #endif\r\n\r\n    #if ( NUM_HEMI_LIGHTS > 0 )\r\n\r\n      #pragma unroll_loop_start\r\n      for ( int i = 0; i < NUM_HEMI_LIGHTS; i ++ ) {\r\n\r\n        #if THREE_VRM_THREE_REVISION >= 133\r\n          irradiance += getHemisphereLightIrradiance( hemisphereLights[ i ], geometry.normal );\r\n        #else\r\n          irradiance += getHemisphereLightIrradiance( hemisphereLights[ i ], geometry );\r\n        #endif\r\n\r\n      }\r\n      #pragma unroll_loop_end\r\n\r\n    #endif\r\n\r\n  #endif\r\n\r\n  // #if defined( RE_IndirectSpecular )\r\n\r\n  //   vec3 radiance = vec3( 0.0 );\r\n  //   vec3 clearcoatRadiance = vec3( 0.0 );\r\n\r\n  // #endif\r\n\r\n  #include <lights_fragment_maps>\r\n  #include <lights_fragment_end>\r\n\r\n  // modulation\r\n  #include <aomap_fragment>\r\n\r\n  vec3 col = reflectedLight.directDiffuse + reflectedLight.indirectDiffuse;\r\n\r\n  #ifdef DEBUG_LITSHADERATE\r\n    gl_FragColor = vec4( col, diffuseColor.a );\r\n    postCorrection();\r\n    return;\r\n  #endif\r\n\r\n  // -- MToon: rim lighting -----------------------------------------\r\n  vec3 viewDir = normalize( vViewPosition );\r\n\r\n  #ifndef PHYSICALLY_CORRECT_LIGHTS\r\n    reflectedLight.directSpecular /= PI;\r\n  #endif\r\n  vec3 rimMix = mix( vec3( 1.0 ), reflectedLight.directSpecular, 1.0 );\r\n\r\n  vec3 rim = parametricRimColorFactor * pow( saturate( 1.0 - dot( viewDir, normal ) + parametricRimLiftFactor ), parametricRimFresnelPowerFactor );\r\n\r\n  #ifdef USE_MATCAPTEXTURE\r\n    {\r\n      vec3 x = normalize( vec3( viewDir.z, 0.0, -viewDir.x ) );\r\n      vec3 y = cross( viewDir, x ); // guaranteed to be normalized\r\n      vec2 sphereUv = 0.5 + 0.5 * vec2( dot( x, normal ), -dot( y, normal ) );\r\n      sphereUv = ( matcapTextureUvTransform * vec3( sphereUv, 1 ) ).xy;\r\n      #if THREE_VRM_THREE_REVISION >= 137\r\n        vec3 matcap = texture2D( matcapTexture, sphereUv ).rgb;\r\n      #else\r\n        // COMPAT: pre-r137\r\n        vec3 matcap = matcapTextureTexelToLinear( texture2D( matcapTexture, sphereUv ) ).rgb;\r\n      #endif\r\n      rim += matcapFactor * matcap;\r\n    }\r\n  #endif\r\n\r\n  #ifdef USE_RIMMULTIPLYTEXTURE\r\n    vec2 rimMultiplyTextureUv = ( rimMultiplyTextureUvTransform * vec3( uv, 1 ) ).xy;\r\n    #if THREE_VRM_THREE_REVISION >= 137\r\n      rim *= texture2D( rimMultiplyTexture, rimMultiplyTextureUv ).rgb;\r\n    #else\r\n      // COMPAT: pre-r137\r\n      rim *= rimMultiplyTextureTexelToLinear( texture2D( rimMultiplyTexture, rimMultiplyTextureUv ) ).rgb;\r\n    #endif\r\n  #endif\r\n\r\n  col += rimMix * rim;\r\n\r\n  // -- MToon: Emission --------------------------------------------------------\r\n  col += totalEmissiveRadiance;\r\n\r\n  // #include <envmap_fragment>\r\n\r\n  // -- Almost done! -----------------------------------------------------------\r\n  #if defined( OUTLINE )\r\n    col = outlineColorFactor.rgb * mix( vec3( 1.0 ), col, outlineLightingMixFactor );\r\n  #endif\r\n\r\n  gl_FragColor = vec4( col, diffuseColor.a );\r\n  postCorrection();\r\n}\r\n'}),this.uvAnimationScrollXSpeedFactor=0,this.uvAnimationScrollYSpeedFactor=0,this.uvAnimationRotationSpeedFactor=0,this.fog=!0,this.normalMapType=i.TangentSpaceNormalMap,this._ignoreVertexColor=!0,this._v0CompatShade=!1,this._debugMode=Re.None,this._outlineWidthMode=Te.None,this._isOutline=!1,e.transparentWithZWrite&&(e.depthWrite=!0),delete e.transparentWithZWrite,e.fog=!0,e.lights=!0,e.clipping=!0,parseInt(i.REVISION,10)<129&&(e.skinning=e.skinning||!1),parseInt(i.REVISION,10)<131&&(e.morphTargets=e.morphTargets||!1,e.morphNormals=e.morphNormals||!1),this.uniforms=i.UniformsUtils.merge([i.UniformsLib.common,i.UniformsLib.normalmap,i.UniformsLib.emissivemap,i.UniformsLib.fog,i.UniformsLib.lights,{litFactor:{value:new i.Color(1,1,1)},mapUvTransform:{value:new i.Matrix3},colorAlpha:{value:1},normalMapUvTransform:{value:new i.Matrix3},shadeColorFactor:{value:new i.Color(.97,.81,.86)},shadeMultiplyTexture:{value:null},shadeMultiplyTextureUvTransform:{value:new i.Matrix3},shadingShiftFactor:{value:0},shadingShiftTexture:{value:null},shadingShiftTextureUvTransform:{value:new i.Matrix3},shadingShiftTextureScale:{value:null},shadingToonyFactor:{value:.9},giEqualizationFactor:{value:.9},matcapFactor:{value:new i.Color(1,1,1)},matcapTexture:{value:null},matcapTextureUvTransform:{value:new i.Matrix3},parametricRimColorFactor:{value:new i.Color(0,0,0)},rimMultiplyTexture:{value:null},rimMultiplyTextureUvTransform:{value:new i.Matrix3},rimLightingMixFactor:{value:0},parametricRimFresnelPowerFactor:{value:1},parametricRimLiftFactor:{value:0},emissive:{value:new i.Color(0,0,0)},emissiveIntensity:{value:1},emissiveMapUvTransform:{value:new i.Matrix3},outlineWidthMultiplyTexture:{value:null},outlineWidthMultiplyTextureUvTransform:{value:new i.Matrix3},outlineWidthFactor:{value:.5},outlineColorFactor:{value:new i.Color(0,0,0)},outlineLightingMixFactor:{value:1},uvAnimationMaskTexture:{value:null},uvAnimationMaskTextureUvTransform:{value:new i.Matrix3},uvAnimationScrollXOffset:{value:0},uvAnimationScrollYOffset:{value:0},uvAnimationRotationPhase:{value:0}},e.uniforms]),this.setValues(e),this._uploadUniformsWorkaround(),this.customProgramCacheKey=()=>[this._ignoreVertexColor?"ignoreVertexColor":"",this._v0CompatShade?"v0CompatShade":"","none"!==this._debugMode?`debugMode:${this._debugMode}`:"","none"!==this._outlineWidthMode?`outlineWidthMode:${this._outlineWidthMode}`:"",this._isOutline?"isOutline":"",...Object.entries(this._generateDefines()).map((([e,t])=>`${e}:${t}`)),this.matcapTexture?`matcapTextureEncoding:${this.matcapTexture.encoding}`:"",this.shadeMultiplyTexture?`shadeMultiplyTextureEncoding:${this.shadeMultiplyTexture.encoding}`:"",this.rimMultiplyTexture?`rimMultiplyTextureEncoding:${this.rimMultiplyTexture.encoding}`:""].join(","),this.onBeforeCompile=(e,t)=>{const r=t.capabilities.isWebGL2,n=parseInt(i.REVISION,10),o=Object.entries(Object.assign(Object.assign({},this._generateDefines()),this.defines)).filter((([e,t])=>!!t)).map((([e,t])=>`#define ${e} ${t}`)).join("\n")+"\n";let s="";parseInt(i.REVISION,10)<137&&(s=(null!==this.matcapTexture?we("matcapTextureTexelToLinear",Ee(this.matcapTexture,r))+"\n":"")+(null!==this.shadeMultiplyTexture?we("shadeMultiplyTextureTexelToLinear",Ee(this.shadeMultiplyTexture,r))+"\n":"")+(null!==this.rimMultiplyTexture?we("rimMultiplyTextureTexelToLinear",Ee(this.rimMultiplyTexture,r))+"\n":"")),e.vertexShader=o+e.vertexShader,e.fragmentShader=o+s+e.fragmentShader,n<132&&(e.fragmentShader=e.fragmentShader.replace("#include <normal_pars_fragment>",""),e.fragmentShader=e.fragmentShader.replace("#include <alphatest_pars_fragment>",""))}}get color(){return this.uniforms.litFactor.value}set color(e){this.uniforms.litFactor.value=e}get map(){return this.uniforms.map.value}set map(e){this.uniforms.map.value=e}get normalMap(){return this.uniforms.normalMap.value}set normalMap(e){this.uniforms.normalMap.value=e}get normalScale(){return this.uniforms.normalScale.value}set normalScale(e){this.uniforms.normalScale.value=e}get emissive(){return this.uniforms.emissive.value}set emissive(e){this.uniforms.emissive.value=e}get emissiveIntensity(){return this.uniforms.emissiveIntensity.value}set emissiveIntensity(e){this.uniforms.emissiveIntensity.value=e}get emissiveMap(){return this.uniforms.emissiveMap.value}set emissiveMap(e){this.uniforms.emissiveMap.value=e}get shadeColorFactor(){return this.uniforms.shadeColorFactor.value}set shadeColorFactor(e){this.uniforms.shadeColorFactor.value=e}get shadeMultiplyTexture(){return this.uniforms.shadeMultiplyTexture.value}set shadeMultiplyTexture(e){this.uniforms.shadeMultiplyTexture.value=e}get shadingShiftFactor(){return this.uniforms.shadingShiftFactor.value}set shadingShiftFactor(e){this.uniforms.shadingShiftFactor.value=e}get shadingShiftTexture(){return this.uniforms.shadingShiftTexture.value}set shadingShiftTexture(e){this.uniforms.shadingShiftTexture.value=e}get shadingShiftTextureScale(){return this.uniforms.shadingShiftTextureScale.value}set shadingShiftTextureScale(e){this.uniforms.shadingShiftTextureScale.value=e}get shadingToonyFactor(){return this.uniforms.shadingToonyFactor.value}set shadingToonyFactor(e){this.uniforms.shadingToonyFactor.value=e}get giEqualizationFactor(){return this.uniforms.giEqualizationFactor.value}set giEqualizationFactor(e){this.uniforms.giEqualizationFactor.value=e}get matcapFactor(){return this.uniforms.matcapFactor.value}set matcapFactor(e){this.uniforms.matcapFactor.value=e}get matcapTexture(){return this.uniforms.matcapTexture.value}set matcapTexture(e){this.uniforms.matcapTexture.value=e}get parametricRimColorFactor(){return this.uniforms.parametricRimColorFactor.value}set parametricRimColorFactor(e){this.uniforms.parametricRimColorFactor.value=e}get rimMultiplyTexture(){return this.uniforms.rimMultiplyTexture.value}set rimMultiplyTexture(e){this.uniforms.rimMultiplyTexture.value=e}get rimLightingMixFactor(){return this.uniforms.rimLightingMixFactor.value}set rimLightingMixFactor(e){this.uniforms.rimLightingMixFactor.value=e}get parametricRimFresnelPowerFactor(){return this.uniforms.parametricRimFresnelPowerFactor.value}set parametricRimFresnelPowerFactor(e){this.uniforms.parametricRimFresnelPowerFactor.value=e}get parametricRimLiftFactor(){return this.uniforms.parametricRimLiftFactor.value}set parametricRimLiftFactor(e){this.uniforms.parametricRimLiftFactor.value=e}get outlineWidthMultiplyTexture(){return this.uniforms.outlineWidthMultiplyTexture.value}set outlineWidthMultiplyTexture(e){this.uniforms.outlineWidthMultiplyTexture.value=e}get outlineWidthFactor(){return this.uniforms.outlineWidthFactor.value}set outlineWidthFactor(e){this.uniforms.outlineWidthFactor.value=e}get outlineColorFactor(){return this.uniforms.outlineColorFactor.value}set outlineColorFactor(e){this.uniforms.outlineColorFactor.value=e}get outlineLightingMixFactor(){return this.uniforms.outlineLightingMixFactor.value}set outlineLightingMixFactor(e){this.uniforms.outlineLightingMixFactor.value=e}get uvAnimationMaskTexture(){return this.uniforms.uvAnimationMaskTexture.value}set uvAnimationMaskTexture(e){this.uniforms.uvAnimationMaskTexture.value=e}get uvAnimationScrollXOffset(){return this.uniforms.uvAnimationScrollXOffset.value}set uvAnimationScrollXOffset(e){this.uniforms.uvAnimationScrollXOffset.value=e}get uvAnimationScrollYOffset(){return this.uniforms.uvAnimationScrollYOffset.value}set uvAnimationScrollYOffset(e){this.uniforms.uvAnimationScrollYOffset.value=e}get uvAnimationRotationPhase(){return this.uniforms.uvAnimationRotationPhase.value}set uvAnimationRotationPhase(e){this.uniforms.uvAnimationRotationPhase.value=e}get ignoreVertexColor(){return this._ignoreVertexColor}set ignoreVertexColor(e){this._ignoreVertexColor=e,this.needsUpdate=!0}get v0CompatShade(){return this._v0CompatShade}set v0CompatShade(e){this._v0CompatShade=e,this.needsUpdate=!0}get debugMode(){return this._debugMode}set debugMode(e){this._debugMode=e,this.needsUpdate=!0}get outlineWidthMode(){return this._outlineWidthMode}set outlineWidthMode(e){this._outlineWidthMode=e,this.needsUpdate=!0}get isOutline(){return this._isOutline}set isOutline(e){this._isOutline=e,this.needsUpdate=!0}get isMToonMaterial(){return!0}update(e){this._uploadUniformsWorkaround(),this._updateUVAnimation(e)}copy(e){return super.copy(e),this.map=e.map,this.normalMap=e.normalMap,this.emissiveMap=e.emissiveMap,this.shadeMultiplyTexture=e.shadeMultiplyTexture,this.shadingShiftTexture=e.shadingShiftTexture,this.matcapTexture=e.matcapTexture,this.rimMultiplyTexture=e.rimMultiplyTexture,this.outlineWidthMultiplyTexture=e.outlineWidthMultiplyTexture,this.uvAnimationMaskTexture=e.uvAnimationMaskTexture,this.normalMapType=e.normalMapType,this.uvAnimationScrollXSpeedFactor=e.uvAnimationScrollXSpeedFactor,this.uvAnimationScrollYSpeedFactor=e.uvAnimationScrollYSpeedFactor,this.uvAnimationRotationSpeedFactor=e.uvAnimationRotationSpeedFactor,this.ignoreVertexColor=e.ignoreVertexColor,this.v0CompatShade=e.v0CompatShade,this.debugMode=e.debugMode,this.outlineWidthMode=e.outlineWidthMode,this.isOutline=e.isOutline,this.needsUpdate=!0,this}_updateUVAnimation(e){this.uniforms.uvAnimationScrollXOffset.value+=e*this.uvAnimationScrollXSpeedFactor,this.uniforms.uvAnimationScrollYOffset.value+=e*this.uvAnimationScrollYSpeedFactor,this.uniforms.uvAnimationRotationPhase.value+=e*this.uvAnimationRotationSpeedFactor,this.uniformsNeedUpdate=!0}_uploadUniformsWorkaround(){this.uniforms.opacity.value=this.opacity,this._updateTextureMatrix(this.uniforms.map,this.uniforms.mapUvTransform),this._updateTextureMatrix(this.uniforms.normalMap,this.uniforms.normalMapUvTransform),this._updateTextureMatrix(this.uniforms.emissiveMap,this.uniforms.emissiveMapUvTransform),this._updateTextureMatrix(this.uniforms.shadeMultiplyTexture,this.uniforms.shadeMultiplyTextureUvTransform),this._updateTextureMatrix(this.uniforms.shadingShiftTexture,this.uniforms.shadingShiftTextureUvTransform),this._updateTextureMatrix(this.uniforms.matcapTexture,this.uniforms.matcapTextureUvTransform),this._updateTextureMatrix(this.uniforms.rimMultiplyTexture,this.uniforms.rimMultiplyTextureUvTransform),this._updateTextureMatrix(this.uniforms.outlineWidthMultiplyTexture,this.uniforms.outlineWidthMultiplyTextureUvTransform),this._updateTextureMatrix(this.uniforms.uvAnimationMaskTexture,this.uniforms.uvAnimationMaskTextureUvTransform);parseInt(i.REVISION,10)>=132&&(this.uniforms.alphaTest.value=this.alphaTest),this.uniformsNeedUpdate=!0}_generateDefines(){const e=parseInt(i.REVISION,10),t=null!==this.outlineWidthMultiplyTexture,r=null!==this.map||null!==this.emissiveMap||null!==this.shadeMultiplyTexture||null!==this.shadingShiftTexture||null!==this.rimMultiplyTexture||null!==this.uvAnimationMaskTexture;return{THREE_VRM_THREE_REVISION:e,OUTLINE:this._isOutline,MTOON_USE_UV:t||r,MTOON_UVS_VERTEX_ONLY:t&&!r,V0_COMPAT_SHADE:this._v0CompatShade,USE_SHADEMULTIPLYTEXTURE:null!==this.shadeMultiplyTexture,USE_SHADINGSHIFTTEXTURE:null!==this.shadingShiftTexture,USE_MATCAPTEXTURE:null!==this.matcapTexture,USE_RIMMULTIPLYTEXTURE:null!==this.rimMultiplyTexture,USE_OUTLINEWIDTHMULTIPLYTEXTURE:null!==this.outlineWidthMultiplyTexture,USE_UVANIMATIONMASKTEXTURE:null!==this.uvAnimationMaskTexture,IGNORE_VERTEX_COLOR:!0===this._ignoreVertexColor,DEBUG_NORMAL:"normal"===this._debugMode,DEBUG_LITSHADERATE:"litShadeRate"===this._debugMode,DEBUG_UV:"uv"===this._debugMode,OUTLINE_WIDTH_WORLD:this._outlineWidthMode===Te.WorldCoordinates,OUTLINE_WIDTH_SCREEN:this._outlineWidthMode===Te.ScreenCoordinates}}_updateTextureMatrix(e,t){e.value&&(e.value.matrixAutoUpdate&&e.value.updateMatrix(),t.value.copy(e.value.matrix))}}class Le{constructor(e,t){this._parser=e,this._materialParams=t,this._pendings=[]}get pending(){return Promise.all(this._pendings)}assignPrimitive(e,t){null!=t&&(this._materialParams[e]=t)}assignColor(e,t,r){null!=t&&(this._materialParams[e]=(new i.Color).fromArray(t),r&&this._materialParams[e].convertSRGBToLinear())}assignTexture(e,t,r){return ye(this,void 0,void 0,(function*(){const n=(()=>ye(this,void 0,void 0,(function*(){null!=t&&(yield this._parser.assignTexture(this._materialParams,e,t),r&&(this._materialParams[e].encoding=i.sRGBEncoding))})))();return this._pendings.push(n),n}))}assignTextureByIndex(e,t,r){return ye(this,void 0,void 0,(function*(){return this.assignTexture(e,null!=t?{index:t}:void 0,r)}))}}class Se{constructor(e,t={}){var r,i,n;this.parser=e,this.renderOrderOffset=null!==(r=t.renderOrderOffset)&&void 0!==r?r:0,this.v0CompatShade=null!==(i=t.v0CompatShade)&&void 0!==i&&i,this.debugMode=null!==(n=t.debugMode)&&void 0!==n?n:"none",this._mToonMaterialSet=new Set}get name(){return Se.EXTENSION_NAME}beforeRoot(){return ye(this,void 0,void 0,(function*(){this._removeUnlitExtensionIfMToonExists()}))}afterRoot(e){return ye(this,void 0,void 0,(function*(){e.userData.vrmMToonMaterials=Array.from(this._mToonMaterialSet)}))}getMaterialType(e){return this._getMToonExtension(e)?Pe:null}extendMaterialParams(e,t){const r=this._getMToonExtension(e);return r?this._extendMaterialParams(r,t):null}loadMesh(e){var t;return ye(this,void 0,void 0,(function*(){const r=this.parser,i=r.json,n=null===(t=i.meshes)||void 0===t?void 0:t[e];if(null==n)throw new Error(`MToonMaterialLoaderPlugin: Attempt to use meshes[${e}] of glTF but the mesh doesn't exist`);const o=n.primitives,s=yield r.loadMesh(e);if(1===o.length){const e=s,t=o[0].material;null!=t&&this._setupPrimitive(e,t)}else{const e=s;for(let t=0;t<o.length;t++){const r=e.children[t],i=o[t].material;null!=i&&this._setupPrimitive(r,i)}}return s}))}_removeUnlitExtensionIfMToonExists(){const e=this.parser.json.materials;null==e||e.map(((e,t)=>{var r;this._getMToonExtension(t)&&(null===(r=e.extensions)||void 0===r?void 0:r.KHR_materials_unlit)&&delete e.extensions.KHR_materials_unlit}))}_getMToonExtension(e){var t,r;const i=null===(t=this.parser.json.materials)||void 0===t?void 0:t[e];if(null==i)return void console.warn(`MToonMaterialLoaderPlugin: Attempt to use materials[${e}] of glTF but the material doesn't exist`);const n=null===(r=i.extensions)||void 0===r?void 0:r[Se.EXTENSION_NAME];if(null==n)return;return"1.0-beta"===n.specVersion?n:void 0}_extendMaterialParams(e,t){var r;return ye(this,void 0,void 0,(function*(){delete t.metalness,delete t.roughness;const i=new Le(this.parser,t);i.assignPrimitive("transparentWithZWrite",e.transparentWithZWrite),i.assignColor("shadeColorFactor",e.shadeColorFactor),i.assignTexture("shadeMultiplyTexture",e.shadeMultiplyTexture,!0),i.assignPrimitive("shadingShiftFactor",e.shadingShiftFactor),i.assignTexture("shadingShiftTexture",e.shadingShiftTexture,!0),i.assignPrimitive("shadingShiftTextureScale",null===(r=e.shadingShiftTexture)||void 0===r?void 0:r.scale),i.assignPrimitive("shadingToonyFactor",e.shadingToonyFactor),i.assignPrimitive("giEqualizationFactor",e.giEqualizationFactor),i.assignColor("matcapFactor",e.matcapFactor),i.assignTexture("matcapTexture",e.matcapTexture,!0),i.assignColor("parametricRimColorFactor",e.parametricRimColorFactor),i.assignTexture("rimMultiplyTexture",e.rimMultiplyTexture,!0),i.assignPrimitive("rimLightingMixFactor",e.rimLightingMixFactor),i.assignPrimitive("parametricRimFresnelPowerFactor",e.parametricRimFresnelPowerFactor),i.assignPrimitive("parametricRimLiftFactor",e.parametricRimLiftFactor),i.assignPrimitive("outlineWidthMode",e.outlineWidthMode),i.assignPrimitive("outlineWidthFactor",e.outlineWidthFactor),i.assignTexture("outlineWidthMultiplyTexture",e.outlineWidthMultiplyTexture,!1),i.assignColor("outlineColorFactor",e.outlineColorFactor),i.assignPrimitive("outlineLightingMixFactor",e.outlineLightingMixFactor),i.assignTexture("uvAnimationMaskTexture",e.uvAnimationMaskTexture,!1),i.assignPrimitive("uvAnimationScrollXSpeedFactor",e.uvAnimationScrollXSpeedFactor),i.assignPrimitive("uvAnimationScrollYSpeedFactor",e.uvAnimationScrollYSpeedFactor),i.assignPrimitive("uvAnimationRotationSpeedFactor",e.uvAnimationRotationSpeedFactor),i.assignPrimitive("v0CompatShade",this.v0CompatShade),i.assignPrimitive("debugMode",this.debugMode),yield i.pending}))}_setupPrimitive(e,t){const r=this._getMToonExtension(t);if(r){const t=this._parseRenderOrder(r);return e.renderOrder=t+this.renderOrderOffset,this._generateOutline(e),void this._addToMaterialSet(e)}}_generateOutline(e){const t=e.material;if(!(t instanceof Pe))return;if("none"===t.outlineWidthMode||t.outlineWidthFactor<=0)return;e.material=[t];const r=t.clone();r.name+=" (Outline)",r.isOutline=!0,r.side=i.BackSide,e.material.push(r);const n=e.geometry,o=n.index?n.index.count:n.attributes.position.count/3;n.addGroup(0,o,0),n.addGroup(0,o,1)}_addToMaterialSet(e){const t=e.material,r=new Set;Array.isArray(t)?t.forEach((e=>r.add(e))):r.add(t);for(const e of r)e instanceof Pe&&this._mToonMaterialSet.add(e)}_parseRenderOrder(e){var t;return(e.transparentWithZWrite?0:19)+(null!==(t=e.renderQueueOffsetNumber)&&void 0!==t?t:0)}}
/*!
     * @pixiv/three-vrm-materials-hdr-emissive-multiplier v1.0.0-beta.19
     * Support VRMC_hdr_emissiveMultiplier for @pixiv/three-vrm
     *
     * Copyright (c) 2020-2021 pixiv Inc.
     * @pixiv/three-vrm-materials-hdr-emissive-multiplier is distributed under MIT License
     * https://github.com/pixiv/three-vrm/blob/release/LICENSE
     */
/*! *****************************************************************************
    Copyright (c) Microsoft Corporation.

    Permission to use, copy, modify, and/or distribute this software for any
    purpose with or without fee is hereby granted.

    THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES WITH
    REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF MERCHANTABILITY
    AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY SPECIAL, DIRECT,
    INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES WHATSOEVER RESULTING FROM
    LOSS OF USE, DATA OR PROFITS, WHETHER IN AN ACTION OF CONTRACT, NEGLIGENCE OR
    OTHER TORTIOUS ACTION, ARISING OUT OF OR IN CONNECTION WITH THE USE OR
    PERFORMANCE OF THIS SOFTWARE.
    ***************************************************************************** */
function Ae(e,t,r,i){return new(r||(r=Promise))((function(n,o){function s(e){try{l(i.next(e))}catch(e){o(e)}}function a(e){try{l(i.throw(e))}catch(e){o(e)}}function l(e){var t;e.done?n(e.value):(t=e.value,t instanceof r?t:new r((function(e){e(t)}))).then(s,a)}l((i=i.apply(e,t||[])).next())}))}Se.EXTENSION_NAME="VRMC_materials_mtoon";class be{constructor(e){this.parser=e}get name(){return be.EXTENSION_NAME}extendMaterialParams(e,t){return Ae(this,void 0,void 0,(function*(){const r=this._getHDREmissiveMultiplierExtension(e);if(null==r)return;console.warn("VRMMaterialsHDREmissiveMultiplierLoaderPlugin: `VRMC_materials_hdr_emissiveMultiplier` is archived. Use `KHR_materials_emissive_strength` instead.");const i=r.emissiveMultiplier;t.emissiveIntensity=i}))}_getHDREmissiveMultiplierExtension(e){var t,r;const i=null===(t=this.parser.json.materials)||void 0===t?void 0:t[e];if(null==i)return void console.warn(`VRMMaterialsHDREmissiveMultiplierLoaderPlugin: Attempt to use materials[${e}] of glTF but the material doesn't exist`);const n=null===(r=i.extensions)||void 0===r?void 0:r[be.EXTENSION_NAME];return null!=n?n:void 0}}
/*!
     * @pixiv/three-vrm-materials-v0compat v1.0.0-beta.19
     * VRM0.0 materials compatibility layer plugin for @pixiv/three-vrm
     *
     * Copyright (c) 2020-2021 pixiv Inc.
     * @pixiv/three-vrm-materials-v0compat is distributed under MIT License
     * https://github.com/pixiv/three-vrm/blob/release/LICENSE
     */
/*! *****************************************************************************
    Copyright (c) Microsoft Corporation.

    Permission to use, copy, modify, and/or distribute this software for any
    purpose with or without fee is hereby granted.

    THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES WITH
    REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF MERCHANTABILITY
    AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY SPECIAL, DIRECT,
    INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES WHATSOEVER RESULTING FROM
    LOSS OF USE, DATA OR PROFITS, WHETHER IN AN ACTION OF CONTRACT, NEGLIGENCE OR
    OTHER TORTIOUS ACTION, ARISING OUT OF OR IN CONNECTION WITH THE USE OR
    PERFORMANCE OF THIS SOFTWARE.
    ***************************************************************************** */
function Ie(e,t,r,i){return new(r||(r=Promise))((function(n,o){function s(e){try{l(i.next(e))}catch(e){o(e)}}function a(e){try{l(i.throw(e))}catch(e){o(e)}}function l(e){var t;e.done?n(e.value):(t=e.value,t instanceof r?t:new r((function(e){e(t)}))).then(s,a)}l((i=i.apply(e,t||[])).next())}))}function Ue(e){return Math.pow(e,2.2)}be.EXTENSION_NAME="VRMC_materials_hdr_emissiveMultiplier";class Ve{constructor(e){var t;this.parser=e,this._renderQueueMapTransparent=new Map,this._renderQueueMapTransparentZWrite=new Map;const r=this.parser.json;r.extensionsUsed=null!==(t=r.extensionsUsed)&&void 0!==t?t:[],-1===r.extensionsUsed.indexOf("KHR_texture_transform")&&r.extensionsUsed.push("KHR_texture_transform")}get name(){return"VRMMaterialsV0CompatPlugin"}beforeRoot(){var e;return Ie(this,void 0,void 0,(function*(){const t=this.parser.json,r=null===(e=t.extensions)||void 0===e?void 0:e.VRM,i=null==r?void 0:r.materialProperties;i&&(this._populateRenderQueueMap(i),i.forEach(((e,r)=>{var i,n;const o=null===(i=t.materials)||void 0===i?void 0:i[r];if(null!=o)if("VRM/MToon"===e.shader){const i=this._parseV0MToonProperties(e,o);t.materials[r]=i}else if(null===(n=e.shader)||void 0===n?void 0:n.startsWith("VRM/Unlit")){const i=this._parseV0UnlitProperties(e,o);t.materials[r]=i}else"VRM_USE_GLTFSHADER"===e.shader||console.warn(`VRMMaterialsV0CompatPlugin: Unknown shader: ${e.shader}`);else console.warn(`VRMMaterialsV0CompatPlugin: Attempt to use materials[${r}] of glTF but the material doesn't exist`)})))}))}_parseV0MToonProperties(e,t){var r,n,o,s,a,l,u,d,h,c,p,m,f,g,v,_,M,x,y,R,T,w,E,P,L,S,A,b,I,U,V,O,C,N,D,F,B,H,k,W,z,j,G,X;const Y=null!==(n=null===(r=e.keywordMap)||void 0===r?void 0:r._ALPHABLEND_ON)&&void 0!==n&&n,Q=1===(null===(o=e.floatProperties)||void 0===o?void 0:o._ZWrite)&&Y,q=this._v0ParseRenderQueue(e),$=null!==(a=null===(s=e.keywordMap)||void 0===s?void 0:s._ALPHATEST_ON)&&void 0!==a&&a,Z=Y?"BLEND":$?"MASK":"OPAQUE",J=$?null===(l=e.floatProperties)||void 0===l?void 0:l._Cutoff:void 0,K=0===(null!==(d=null===(u=e.floatProperties)||void 0===u?void 0:u._CullMode)&&void 0!==d?d:2),ee=this._portTextureTransform(e),te=null===(c=null===(h=e.vectorProperties)||void 0===h?void 0:h._Color)||void 0===c?void 0:c.map(((e,t)=>3===t?e:Ue(e))),re=null===(p=e.textureProperties)||void 0===p?void 0:p._MainTex,ie=null!=re?{index:re,extensions:Object.assign({},ee)}:void 0,ne=null===(m=e.floatProperties)||void 0===m?void 0:m._BumpScale,oe=null===(f=e.textureProperties)||void 0===f?void 0:f._BumpMap,se=null!=oe?{index:oe,scale:ne,extensions:Object.assign({},ee)}:void 0,ae=null===(v=null===(g=e.vectorProperties)||void 0===g?void 0:g._EmissionColor)||void 0===v?void 0:v.map(Ue),le=null===(_=e.textureProperties)||void 0===_?void 0:_._EmissionMap,ue=null!=le?{index:le,extensions:Object.assign({},ee)}:void 0,de=null===(x=null===(M=e.vectorProperties)||void 0===M?void 0:M._ShadeColor)||void 0===x?void 0:x.map(Ue),he=null===(y=e.textureProperties)||void 0===y?void 0:y._ShadeTexture,ce=null!=he?{index:he,extensions:Object.assign({},ee)}:void 0;let pe=null!==(T=null===(R=e.floatProperties)||void 0===R?void 0:R._ShadeShift)&&void 0!==T?T:0,me=null!==(E=null===(w=e.floatProperties)||void 0===w?void 0:w._ShadeToony)&&void 0!==E?E:.9;me=i.MathUtils.lerp(me,1,.5+.5*pe),pe=-pe-(1-me);const fe=null===(P=e.floatProperties)||void 0===P?void 0:P._IndirectLightIntensity,ge=fe?1-fe:void 0,ve=null===(L=e.textureProperties)||void 0===L?void 0:L._SphereAdd,_e=null!=ve?{index:ve}:void 0,Me=null===(S=e.floatProperties)||void 0===S?void 0:S._RimLightingMix,xe=null===(A=e.textureProperties)||void 0===A?void 0:A._RimTexture,ye=null!=xe?{index:xe,extensions:Object.assign({},ee)}:void 0,Re=null===(I=null===(b=e.vectorProperties)||void 0===b?void 0:b._RimColor)||void 0===I?void 0:I.map(Ue),Te=null===(U=e.floatProperties)||void 0===U?void 0:U._RimFresnelPower,we=null===(V=e.floatProperties)||void 0===V?void 0:V._RimLift,Ee=["none","worldCoordinates","screenCoordinates"][null!==(C=null===(O=e.floatProperties)||void 0===O?void 0:O._OutlineWidthMode)&&void 0!==C?C:0];let Pe=null!==(D=null===(N=e.floatProperties)||void 0===N?void 0:N._OutlineWidth)&&void 0!==D?D:0;Pe*=.01;const Le=null===(F=e.textureProperties)||void 0===F?void 0:F._OutlineWidthTexture,Se=null!=Le?{index:Le,extensions:Object.assign({},ee)}:void 0,Ae=null===(H=null===(B=e.vectorProperties)||void 0===B?void 0:B._OutlineColor)||void 0===H?void 0:H.map(Ue),be=1===(null===(k=e.floatProperties)||void 0===k?void 0:k._OutlineColorMode)?null===(W=e.floatProperties)||void 0===W?void 0:W._OutlineLightingMix:0,Ie=null===(z=e.textureProperties)||void 0===z?void 0:z._UvAnimMaskTexture,Ve=null!=Ie?{index:Ie,extensions:Object.assign({},ee)}:void 0,Oe=null===(j=e.floatProperties)||void 0===j?void 0:j._UvAnimScrollX;let Ce=null===(G=e.floatProperties)||void 0===G?void 0:G._UvAnimScrollY;null!=Ce&&(Ce=-Ce);const Ne={specVersion:"1.0-beta",transparentWithZWrite:Q,renderQueueOffsetNumber:q,shadeColorFactor:de,shadeMultiplyTexture:ce,shadingShiftFactor:pe,shadingToonyFactor:me,giEqualizationFactor:ge,matcapTexture:_e,rimLightingMixFactor:Me,rimMultiplyTexture:ye,parametricRimColorFactor:Re,parametricRimFresnelPowerFactor:Te,parametricRimLiftFactor:we,outlineWidthMode:Ee,outlineWidthFactor:Pe,outlineWidthMultiplyTexture:Se,outlineColorFactor:Ae,outlineLightingMixFactor:be,uvAnimationMaskTexture:Ve,uvAnimationScrollXSpeedFactor:Oe,uvAnimationScrollYSpeedFactor:Ce,uvAnimationRotationSpeedFactor:null===(X=e.floatProperties)||void 0===X?void 0:X._UvAnimRotation};return Object.assign(Object.assign({},t),{pbrMetallicRoughness:{baseColorFactor:te,baseColorTexture:ie},normalTexture:se,emissiveTexture:ue,emissiveFactor:ae,alphaMode:Z,alphaCutoff:J,doubleSided:K,extensions:{VRMC_materials_mtoon:Ne}})}_parseV0UnlitProperties(e,t){var r,i,n,o;const s="VRM/UnlitTransparentZWrite"===e.shader,a="VRM/UnlitTransparent"===e.shader||s,l=this._v0ParseRenderQueue(e),u="VRM/UnlitCutout"===e.shader,d=a?"BLEND":u?"MASK":"OPAQUE",h=u?null===(r=e.floatProperties)||void 0===r?void 0:r._Cutoff:void 0,c=this._portTextureTransform(e),p=null===(n=null===(i=e.vectorProperties)||void 0===i?void 0:i._Color)||void 0===n?void 0:n.map(Ue),m=null===(o=e.textureProperties)||void 0===o?void 0:o._MainTex,f=null!=m?{index:m,extensions:Object.assign({},c)}:void 0,g={specVersion:"1.0-beta",transparentWithZWrite:s,renderQueueOffsetNumber:l,shadeColorFactor:p,shadeMultiplyTexture:f};return Object.assign(Object.assign({},t),{pbrMetallicRoughness:{baseColorFactor:p,baseColorTexture:f},alphaMode:d,alphaCutoff:h,extensions:{VRMC_materials_mtoon:g}})}_portTextureTransform(e){var t,r,i,n,o;const s=null===(t=e.vectorProperties)||void 0===t?void 0:t._MainTex;if(null==s)return{};const a=[null!==(r=null==s?void 0:s[0])&&void 0!==r?r:0,null!==(i=null==s?void 0:s[1])&&void 0!==i?i:0],l=[null!==(n=null==s?void 0:s[2])&&void 0!==n?n:1,null!==(o=null==s?void 0:s[3])&&void 0!==o?o:1];return a[1]=l[1]*(1-a[1])%1,{KHR_texture_transform:{offset:a,scale:l}}}_v0ParseRenderQueue(e){var t,r,i;const n=null!==(r=null===(t=e.keywordMap)||void 0===t?void 0:t._ALPHABLEND_ON)&&void 0!==r&&r,o=1===(null===(i=e.floatProperties)||void 0===i?void 0:i._ZWrite);let s=0;if(n){const t=e.renderQueue;null!=t&&(s=o?this._renderQueueMapTransparentZWrite.get(t):this._renderQueueMapTransparent.get(t))}return s}_populateRenderQueueMap(e){const t=new Set,r=new Set;e.forEach((e=>{var i,n,o;const s=null!==(n=null===(i=e.keywordMap)||void 0===i?void 0:i._ALPHABLEND_ON)&&void 0!==n&&n,a=1===(null===(o=e.floatProperties)||void 0===o?void 0:o._ZWrite);if(s){const i=e.renderQueue;null!=i&&(a?r.add(i):t.add(i))}})),t.size>10&&console.warn(`VRMMaterialsV0CompatPlugin: This VRM uses ${t.size} render queues for Transparent materials while VRM 1.0 only supports up to 10 render queues. The model might not be rendered correctly.`),r.size>10&&console.warn(`VRMMaterialsV0CompatPlugin: This VRM uses ${r.size} render queues for TransparentZWrite materials while VRM 1.0 only supports up to 10 render queues. The model might not be rendered correctly.`),Array.from(t).sort().forEach(((e,r)=>{const i=Math.min(Math.max(r-t.size+1,-9),0);this._renderQueueMapTransparent.set(e,i)})),Array.from(r).sort().forEach(((e,t)=>{const r=Math.min(Math.max(t,0),9);this._renderQueueMapTransparentZWrite.set(e,r)}))}}
/*!
     * @pixiv/three-vrm-node-constraint v1.0.0-beta.19
     * Node constraint module for @pixiv/three-vrm
     *
     * Copyright (c) 2020-2021 pixiv Inc.
     * @pixiv/three-vrm-node-constraint is distributed under MIT License
     * https://github.com/pixiv/three-vrm/blob/release/LICENSE
     */const Oe=new i.Vector3;class Ce extends i.Group{constructor(e){super(),this._attrPosition=new i.BufferAttribute(new Float32Array([0,0,0,0,0,0]),3),this._attrPosition.setUsage(i.DynamicDrawUsage);const t=new i.BufferGeometry;t.setAttribute("position",this._attrPosition);const r=new i.LineBasicMaterial({color:16711935,depthTest:!1,depthWrite:!1});this._line=new i.Line(t,r),this.add(this._line),this.constraint=e}updateMatrixWorld(e){Oe.setFromMatrixPosition(this.constraint.destination.matrixWorld),this._attrPosition.setXYZ(0,Oe.x,Oe.y,Oe.z),this.constraint.source&&Oe.setFromMatrixPosition(this.constraint.source.matrixWorld),this._attrPosition.setXYZ(1,Oe.x,Oe.y,Oe.z),this._attrPosition.needsUpdate=!0,super.updateMatrixWorld(e)}}function Ne(e,t){return t.set(e.elements[12],e.elements[13],e.elements[14])}const De=new i.Vector3,Fe=new i.Vector3;function Be(e){return e.invert?e.invert():e.inverse(),e}class He{constructor(e,t){this.destination=e,this.source=t,this.weight=1}}const ke=new i.Vector3,We=new i.Vector3,ze=new i.Vector3,je=new i.Quaternion,Ge=new i.Quaternion,Xe=new i.Quaternion;class Ye extends He{constructor(e,t){super(e,t),this._aimAxis="PositiveX",this._v3AimAxis=new i.Vector3(1,0,0),this._dstRestQuat=new i.Quaternion}get aimAxis(){return this._aimAxis}set aimAxis(e){this._aimAxis=e,this._v3AimAxis.set("PositiveX"===e?1:"NegativeX"===e?-1:0,"PositiveY"===e?1:"NegativeY"===e?-1:0,"PositiveZ"===e?1:"NegativeZ"===e?-1:0)}get dependencies(){const e=new Set([this.source]);return this.destination.parent&&e.add(this.destination.parent),e}setInitState(){this._dstRestQuat.copy(this.destination.quaternion)}update(){this.destination.updateWorldMatrix(!0,!1),this.source.updateWorldMatrix(!0,!1);const e=je.identity(),t=Ge.identity();var r,i;this.destination.parent&&(r=this.destination.parent.matrixWorld,i=e,r.decompose(De,i,Fe),Be(t.copy(e)));const n=ke.copy(this._v3AimAxis).applyQuaternion(this._dstRestQuat).applyQuaternion(e),o=Ne(this.source.matrixWorld,We).sub(Ne(this.destination.matrixWorld,ze)).normalize(),s=Xe.setFromUnitVectors(n,o).premultiply(t).multiply(e).multiply(this._dstRestQuat);this.destination.quaternion.copy(this._dstRestQuat).slerp(s,this.weight)}}
/*! *****************************************************************************
    Copyright (c) Microsoft Corporation.

    Permission to use, copy, modify, and/or distribute this software for any
    purpose with or without fee is hereby granted.

    THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES WITH
    REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF MERCHANTABILITY
    AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY SPECIAL, DIRECT,
    INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES WHATSOEVER RESULTING FROM
    LOSS OF USE, DATA OR PROFITS, WHETHER IN AN ACTION OF CONTRACT, NEGLIGENCE OR
    OTHER TORTIOUS ACTION, ARISING OUT OF OR IN CONNECTION WITH THE USE OR
    PERFORMANCE OF THIS SOFTWARE.
    ***************************************************************************** */function Qe(e,t,r,i){return new(r||(r=Promise))((function(n,o){function s(e){try{l(i.next(e))}catch(e){o(e)}}function a(e){try{l(i.throw(e))}catch(e){o(e)}}function l(e){var t;e.done?n(e.value):(t=e.value,t instanceof r?t:new r((function(e){e(t)}))).then(s,a)}l((i=i.apply(e,t||[])).next())}))}function qe(e,t){const r=[e];let i=e.parent;for(;null!==i;)r.unshift(i),i=i.parent;r.forEach((e=>{t(e)}))}class $e{constructor(){this._constraints=new Set,this._objectConstraintsMap=new Map}get constraints(){return this._constraints}addConstraint(e){this._constraints.add(e);let t=this._objectConstraintsMap.get(e.destination);null==t&&(t=new Set,this._objectConstraintsMap.set(e.destination,t)),t.add(e)}deleteConstraint(e){this._constraints.delete(e);this._objectConstraintsMap.get(e.destination).delete(e)}setInitState(){const e=new Set,t=new Set;for(const r of this._constraints)this._processConstraint(r,e,t,(e=>e.setInitState()))}update(){const e=new Set,t=new Set;for(const r of this._constraints)this._processConstraint(r,e,t,(e=>e.update()))}_processConstraint(e,t,r,i){if(r.has(e))return;if(t.has(e))throw new Error("VRMNodeConstraintManager: Circular dependency detected while updating constraints");t.add(e);const n=e.dependencies;for(const e of n)qe(e,(e=>{const n=this._objectConstraintsMap.get(e);if(n)for(const e of n)this._processConstraint(e,t,r,i)}));i(e),r.add(e)}}const Ze=new i.Quaternion,Je=new i.Quaternion;class Ke extends He{constructor(e,t){super(e,t),this._dstRestQuat=new i.Quaternion,this._invSrcRestQuat=new i.Quaternion}get dependencies(){return new Set([this.source])}setInitState(){this._dstRestQuat.copy(this.destination.quaternion),Be(this._invSrcRestQuat.copy(this.source.quaternion))}update(){const e=Ze.copy(this._invSrcRestQuat).multiply(this.source.quaternion),t=Je.copy(this._dstRestQuat).multiply(e);this.destination.quaternion.copy(this._dstRestQuat).slerp(t,this.weight)}}const et=new i.Vector3,tt=new i.Quaternion,rt=new i.Quaternion;class it extends He{constructor(e,t){super(e,t),this._rollAxis="X",this._v3RollAxis=new i.Vector3(1,0,0),this._dstRestQuat=new i.Quaternion,this._invDstRestQuat=new i.Quaternion,this._invSrcRestQuatMulDstRestQuat=new i.Quaternion}get rollAxis(){return this._rollAxis}set rollAxis(e){this._rollAxis=e,this._v3RollAxis.set("X"===e?1:0,"Y"===e?1:0,"Z"===e?1:0)}get dependencies(){return new Set([this.source])}setInitState(){this._dstRestQuat.copy(this.destination.quaternion),Be(this._invDstRestQuat.copy(this._dstRestQuat)),Be(this._invSrcRestQuatMulDstRestQuat.copy(this.source.quaternion)).multiply(this._dstRestQuat)}update(){const e=tt.copy(this._invDstRestQuat).multiply(this.source.quaternion).multiply(this._invSrcRestQuatMulDstRestQuat),t=et.copy(this._v3RollAxis).applyQuaternion(e),r=rt.setFromUnitVectors(t,this._v3RollAxis).premultiply(this._dstRestQuat).multiply(e);this.destination.quaternion.copy(this._dstRestQuat).slerp(r,this.weight)}}class nt{constructor(e,t){this.parser=e,this.helperRoot=null==t?void 0:t.helperRoot}get name(){return nt.EXTENSION_NAME}afterRoot(e){return Qe(this,void 0,void 0,(function*(){e.userData.vrmNodeConstraintManager=yield this._import(e)}))}_import(e){var t;return Qe(this,void 0,void 0,(function*(){const r=this.parser.json;if(!(-1!==(null===(t=r.extensionsUsed)||void 0===t?void 0:t.indexOf(nt.EXTENSION_NAME))))return null;const i=new $e,n=yield this.parser.getDependencies("node");return n.forEach(((e,t)=>{var o;const s=r.nodes[t],a=null===(o=null==s?void 0:s.extensions)||void 0===o?void 0:o[nt.EXTENSION_NAME];if(null==a)return;if("1.0-beta"!==a.specVersion)return;const l=a.constraint;if(null!=l.roll){const t=this._importRollConstraint(e,n,l.roll);i.addConstraint(t)}else if(null!=l.aim){const t=this._importAimConstraint(e,n,l.aim);i.addConstraint(t)}else if(null!=l.rotation){const t=this._importRotationConstraint(e,n,l.rotation);i.addConstraint(t)}})),e.scene.updateMatrixWorld(),i.setInitState(),i}))}_importRollConstraint(e,t,r){const{source:i,rollAxis:n,weight:o}=r,s=t[i],a=new it(e,s);if(null!=n&&(a.rollAxis=n),null!=o&&(a.weight=o),this.helperRoot){const e=new Ce(a);this.helperRoot.add(e)}return a}_importAimConstraint(e,t,r){const{source:i,aimAxis:n,weight:o}=r,s=t[i],a=new Ye(e,s);if(null!=n&&(a.aimAxis=n),null!=o&&(a.weight=o),this.helperRoot){const e=new Ce(a);this.helperRoot.add(e)}return a}_importRotationConstraint(e,t,r){const{source:i,weight:n}=r,o=t[i],s=new Ke(e,o);if(null!=n&&(s.weight=n),this.helperRoot){const e=new Ce(s);this.helperRoot.add(e)}return s}}nt.EXTENSION_NAME="VRMC_node_constraint";
/*!
     * @pixiv/three-vrm-springbone v1.0.0-beta.19
     * Spring bone module for @pixiv/three-vrm
     *
     * Copyright (c) 2020-2021 pixiv Inc.
     * @pixiv/three-vrm-springbone is distributed under MIT License
     * https://github.com/pixiv/three-vrm/blob/release/LICENSE
     */
class ot{}const st=new i.Vector3,at=new i.Vector3;class lt extends ot{constructor(e){var t,r,n;super(),this.offset=null!==(t=null==e?void 0:e.offset)&&void 0!==t?t:new i.Vector3(0,0,0),this.tail=null!==(r=null==e?void 0:e.tail)&&void 0!==r?r:new i.Vector3(0,0,0),this.radius=null!==(n=null==e?void 0:e.radius)&&void 0!==n?n:0}get type(){return"capsule"}calculateCollision(e,t,r,i){st.copy(this.offset).applyMatrix4(e),at.copy(this.tail).applyMatrix4(e),at.sub(st);const n=at.lengthSq();i.copy(t).sub(st);const o=at.dot(i);o<=0||(n<=o||at.multiplyScalar(o/n),i.sub(at));const s=r+this.radius,a=i.length()-s;return i.normalize(),a}}class ut extends ot{constructor(e){var t,r;super(),this.offset=null!==(t=null==e?void 0:e.offset)&&void 0!==t?t:new i.Vector3(0,0,0),this.radius=null!==(r=null==e?void 0:e.radius)&&void 0!==r?r:0}get type(){return"sphere"}calculateCollision(e,t,r,i){i.copy(this.offset).applyMatrix4(e),i.negate().add(t);const n=r+this.radius,o=i.length()-n;return i.normalize(),o}}const dt=new i.Vector3;class ht extends i.BufferGeometry{constructor(e){super(),this._currentRadius=0,this._currentOffset=new i.Vector3,this._currentTail=new i.Vector3,this._shape=e,this._attrPos=new i.BufferAttribute(new Float32Array(396),3),this.setAttribute("position",this._attrPos),this._attrIndex=new i.BufferAttribute(new Uint16Array(264),1),this.setIndex(this._attrIndex),this._buildIndex(),this.update()}update(){let e=!1;this._currentRadius!==this._shape.radius&&(this._currentRadius=this._shape.radius,e=!0),this._currentOffset.equals(this._shape.offset)||(this._currentOffset.copy(this._shape.offset),e=!0),this._currentTail.equals(this._shape.tail)||(this._currentTail.copy(this._shape.tail),e=!0),e&&this._buildPosition()}_buildPosition(){dt.copy(this._currentTail).sub(this._currentOffset);const e=dt.length()/this._currentRadius;for(let t=0;t<=16;t++){const r=t/16*Math.PI;this._attrPos.setXYZ(t,-Math.sin(r),-Math.cos(r),0),this._attrPos.setXYZ(17+t,e+Math.sin(r),Math.cos(r),0),this._attrPos.setXYZ(34+t,-Math.sin(r),0,-Math.cos(r)),this._attrPos.setXYZ(51+t,e+Math.sin(r),0,Math.cos(r))}for(let t=0;t<32;t++){const r=t/16*Math.PI;this._attrPos.setXYZ(68+t,0,Math.sin(r),Math.cos(r)),this._attrPos.setXYZ(100+t,e,Math.sin(r),Math.cos(r))}const t=Math.atan2(dt.y,Math.sqrt(dt.x*dt.x+dt.z*dt.z)),r=-Math.atan2(dt.z,dt.x);this.rotateZ(t),this.rotateY(r),this.scale(this._currentRadius,this._currentRadius,this._currentRadius),this.translate(this._currentOffset.x,this._currentOffset.y,this._currentOffset.z),this._attrPos.needsUpdate=!0}_buildIndex(){for(let e=0;e<34;e++){const t=(e+1)%34;this._attrIndex.setXY(2*e,e,t),this._attrIndex.setXY(68+2*e,34+e,34+t)}for(let e=0;e<32;e++){const t=(e+1)%32;this._attrIndex.setXY(136+2*e,68+e,68+t),this._attrIndex.setXY(200+2*e,100+e,100+t)}this._attrIndex.needsUpdate=!0}}class ct extends i.BufferGeometry{constructor(e){super(),this._currentRadius=0,this._currentOffset=new i.Vector3,this._shape=e,this._attrPos=new i.BufferAttribute(new Float32Array(288),3),this.setAttribute("position",this._attrPos),this._attrIndex=new i.BufferAttribute(new Uint16Array(192),1),this.setIndex(this._attrIndex),this._buildIndex(),this.update()}update(){let e=!1;this._currentRadius!==this._shape.radius&&(this._currentRadius=this._shape.radius,e=!0),this._currentOffset.equals(this._shape.offset)||(this._currentOffset.copy(this._shape.offset),e=!0),e&&this._buildPosition()}_buildPosition(){for(let e=0;e<32;e++){const t=e/16*Math.PI;this._attrPos.setXYZ(e,Math.cos(t),Math.sin(t),0),this._attrPos.setXYZ(32+e,0,Math.cos(t),Math.sin(t)),this._attrPos.setXYZ(64+e,Math.sin(t),0,Math.cos(t))}this.scale(this._currentRadius,this._currentRadius,this._currentRadius),this.translate(this._currentOffset.x,this._currentOffset.y,this._currentOffset.z),this._attrPos.needsUpdate=!0}_buildIndex(){for(let e=0;e<32;e++){const t=(e+1)%32;this._attrIndex.setXY(2*e,e,t),this._attrIndex.setXY(64+2*e,32+e,32+t),this._attrIndex.setXY(128+2*e,64+e,64+t)}this._attrIndex.needsUpdate=!0}}class pt extends i.Group{constructor(e){if(super(),this.matrixAutoUpdate=!1,this.collider=e,this.collider.shape instanceof ut)this._geometry=new ct(this.collider.shape);else{if(!(this.collider.shape instanceof lt))throw new Error("VRMSpringBoneColliderHelper: Unknown collider shape type detected");this._geometry=new ht(this.collider.shape)}const t=new i.LineBasicMaterial({color:16711935,depthTest:!1,depthWrite:!1});this._line=new i.LineSegments(this._geometry,t),this.add(this._line)}dispose(){this._geometry.dispose()}updateMatrixWorld(e){this.collider.updateWorldMatrix(!0,!1),this.matrix.copy(this.collider.matrixWorld),this._geometry.update(),super.updateMatrixWorld(e)}}class mt extends i.BufferGeometry{constructor(e){super(),this._currentRadius=0,this._currentTail=new i.Vector3,this._springBone=e,this._attrPos=new i.BufferAttribute(new Float32Array(294),3),this.setAttribute("position",this._attrPos),this._attrIndex=new i.BufferAttribute(new Uint16Array(194),1),this.setIndex(this._attrIndex),this._buildIndex(),this.update()}update(){let e=!1;this._currentRadius!==this._springBone.settings.hitRadius&&(this._currentRadius=this._springBone.settings.hitRadius,e=!0),this._currentTail.equals(this._springBone.initialLocalChildPosition)||(this._currentTail.copy(this._springBone.initialLocalChildPosition),e=!0),e&&this._buildPosition()}_buildPosition(){for(let e=0;e<32;e++){const t=e/16*Math.PI;this._attrPos.setXYZ(e,Math.cos(t),Math.sin(t),0),this._attrPos.setXYZ(32+e,0,Math.cos(t),Math.sin(t)),this._attrPos.setXYZ(64+e,Math.sin(t),0,Math.cos(t))}this.scale(this._currentRadius,this._currentRadius,this._currentRadius),this.translate(this._currentTail.x,this._currentTail.y,this._currentTail.z),this._attrPos.setXYZ(96,0,0,0),this._attrPos.setXYZ(97,this._currentTail.x,this._currentTail.y,this._currentTail.z),this._attrPos.needsUpdate=!0}_buildIndex(){for(let e=0;e<32;e++){const t=(e+1)%32;this._attrIndex.setXY(2*e,e,t),this._attrIndex.setXY(64+2*e,32+e,32+t),this._attrIndex.setXY(128+2*e,64+e,64+t)}this._attrIndex.setXY(192,96,97),this._attrIndex.needsUpdate=!0}}class ft extends i.Group{constructor(e){super(),this.matrixAutoUpdate=!1,this.springBone=e,this._geometry=new mt(this.springBone);const t=new i.LineBasicMaterial({color:16776960,depthTest:!1,depthWrite:!1});this._line=new i.LineSegments(this._geometry,t),this.add(this._line)}dispose(){this._geometry.dispose()}updateMatrixWorld(e){this.springBone.bone.updateWorldMatrix(!0,!1),this.matrix.copy(this.springBone.bone.matrixWorld),this._geometry.update(),super.updateMatrixWorld(e)}}class gt extends i.Object3D{constructor(e){super(),this.shape=e}}const vt=new i.Matrix4;function _t(e){return e.invert?e.invert():e.getInverse(vt.copy(e)),e}class Mt{constructor(e){this._inverseCache=new i.Matrix4,this._shouldUpdateInverse=!0,this.matrix=e;const t={set:(e,t,r)=>(this._shouldUpdateInverse=!0,e[t]=r,!0)};this._originalElements=e.elements,e.elements=new Proxy(e.elements,t)}get inverse(){return this._shouldUpdateInverse&&(this._inverseCache.copy(this.matrix),_t(this._inverseCache),this._shouldUpdateInverse=!1),this._inverseCache}revert(){this.matrix.elements=this._originalElements}}const xt=new i.Matrix4,yt=new i.Vector3,Rt=new i.Vector3,Tt=new i.Vector3,wt=new i.Vector3,Et=new i.Vector3,Pt=new i.Vector3,Lt=new i.Quaternion,St=new i.Matrix4,At=new i.Matrix4;class bt{constructor(e,t,r={},n=[]){var o,s,a,l,u,d;this._currentTail=new i.Vector3,this._prevTail=new i.Vector3,this._boneAxis=new i.Vector3,this._worldSpaceBoneLength=0,this._center=null,this._initialLocalMatrix=new i.Matrix4,this._initialLocalRotation=new i.Quaternion,this._initialLocalChildPosition=new i.Vector3,this.bone=e,this.bone.matrixAutoUpdate=!1,this.child=t,this.settings={hitRadius:null!==(o=r.hitRadius)&&void 0!==o?o:0,stiffness:null!==(s=r.stiffness)&&void 0!==s?s:1,gravityPower:null!==(a=r.gravityPower)&&void 0!==a?a:0,gravityDir:null!==(u=null===(l=r.gravityDir)||void 0===l?void 0:l.clone())&&void 0!==u?u:new i.Vector3(0,-1,0),dragForce:null!==(d=r.dragForce)&&void 0!==d?d:.4},this.colliderGroups=n}get center(){return this._center}set center(e){var t;(null===(t=this._center)||void 0===t?void 0:t.userData.inverseCacheProxy)&&(this._center.userData.inverseCacheProxy.revert(),delete this._center.userData.inverseCacheProxy),this._center=e,this._center&&(this._center.userData.inverseCacheProxy||(this._center.userData.inverseCacheProxy=new Mt(this._center.matrixWorld)))}get initialLocalChildPosition(){return this._initialLocalChildPosition}get _parentMatrixWorld(){return this.bone.parent?this.bone.parent.matrixWorld:xt}setInitState(){this._initialLocalMatrix.copy(this.bone.matrix),this._initialLocalRotation.copy(this.bone.quaternion),this.child?this._initialLocalChildPosition.copy(this.child.position):this._initialLocalChildPosition.copy(this.bone.position).normalize().multiplyScalar(.07),this.bone.localToWorld(this._currentTail.copy(this._initialLocalChildPosition)),this._prevTail.copy(this._currentTail),this._boneAxis.copy(this._initialLocalChildPosition).normalize(),this._worldSpaceBoneLength=yt.copy(this._initialLocalChildPosition).applyMatrix4(this.bone.matrixWorld).sub(Rt.setFromMatrixPosition(this.bone.matrixWorld)).length()}reset(){this.bone.quaternion.copy(this._initialLocalRotation),this.bone.updateMatrix(),this.bone.matrixWorld.multiplyMatrices(this._parentMatrixWorld,this.bone.matrix);const e=this._getMatrixWorldToCenter(St);this.bone.localToWorld(this._currentTail.copy(this._initialLocalChildPosition)).applyMatrix4(e),this._prevTail.copy(this._currentTail)}update(e){if(e<=0)return;wt.setFromMatrixPosition(this.bone.matrixWorld);let t=this._getMatrixWorldToCenter(St);Et.copy(wt).applyMatrix4(t);const r=Lt.setFromRotationMatrix(t),i=At.copy(t).multiply(this._parentMatrixWorld),n=Rt.copy(this._boneAxis).applyMatrix4(this._initialLocalMatrix).applyMatrix4(i).sub(Et).normalize(),o=Tt.copy(this.settings.gravityDir).applyQuaternion(r).normalize(),s=this._getMatrixCenterToWorld(St);Pt.copy(this._currentTail).add(yt.copy(this._currentTail).sub(this._prevTail).multiplyScalar(1-this.settings.dragForce)).add(yt.copy(n).multiplyScalar(this.settings.stiffness*e)).add(yt.copy(o).multiplyScalar(this.settings.gravityPower*e)).applyMatrix4(s),Pt.sub(wt).normalize().multiplyScalar(this._worldSpaceBoneLength).add(wt),this._collision(Pt),t=this._getMatrixWorldToCenter(St),this._prevTail.copy(this._currentTail),this._currentTail.copy(yt.copy(Pt).applyMatrix4(t));const a=_t(St.copy(this._parentMatrixWorld).multiply(this._initialLocalMatrix)),l=Lt.setFromUnitVectors(this._boneAxis,yt.copy(Pt).applyMatrix4(a).normalize());this.bone.quaternion.copy(this._initialLocalRotation).multiply(l),this.bone.updateMatrix(),this.bone.matrixWorld.multiplyMatrices(this._parentMatrixWorld,this.bone.matrix)}_collision(e){this.colliderGroups.forEach((t=>{t.colliders.forEach((t=>{const r=t.shape.calculateCollision(t.matrixWorld,e,this.settings.hitRadius,yt);r<0&&(e.add(yt.multiplyScalar(-r)),e.sub(wt).normalize().multiplyScalar(this._worldSpaceBoneLength).add(wt))}))}))}_getMatrixCenterToWorld(e){return this._center?e.copy(this._center.matrixWorld):e.identity(),e}_getMatrixWorldToCenter(e){return this._center?e.copy(this._center.userData.inverseCacheProxy.inverse):e.identity(),e}}
/*! *****************************************************************************
    Copyright (c) Microsoft Corporation.

    Permission to use, copy, modify, and/or distribute this software for any
    purpose with or without fee is hereby granted.

    THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES WITH
    REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF MERCHANTABILITY
    AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY SPECIAL, DIRECT,
    INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES WHATSOEVER RESULTING FROM
    LOSS OF USE, DATA OR PROFITS, WHETHER IN AN ACTION OF CONTRACT, NEGLIGENCE OR
    OTHER TORTIOUS ACTION, ARISING OUT OF OR IN CONNECTION WITH THE USE OR
    PERFORMANCE OF THIS SOFTWARE.
    ***************************************************************************** */function It(e,t,r,i){return new(r||(r=Promise))((function(n,o){function s(e){try{l(i.next(e))}catch(e){o(e)}}function a(e){try{l(i.throw(e))}catch(e){o(e)}}function l(e){var t;e.done?n(e.value):(t=e.value,t instanceof r?t:new r((function(e){e(t)}))).then(s,a)}l((i=i.apply(e,t||[])).next())}))}function Ut(e,t){const r=[];let i=e;for(;null!==i;)r.unshift(i),i=i.parent;r.forEach((e=>{t(e)}))}function Vt(e,t){e.children.forEach((e=>{t(e)||Vt(e,t)}))}class Ot{constructor(){this._joints=new Set,this._objectSpringBonesMap=new Map}get joints(){return this._joints}get springBones(){return console.warn("VRMLookAt: springBones is deprecated. use joints instead."),this._joints}get colliderGroups(){const e=new Set;return this._joints.forEach((t=>{t.colliderGroups.forEach((t=>{e.add(t)}))})),Array.from(e)}get colliders(){const e=new Set;return this.colliderGroups.forEach((t=>{t.colliders.forEach((t=>{e.add(t)}))})),Array.from(e)}addJoint(e){this._joints.add(e);let t=this._objectSpringBonesMap.get(e.bone);null==t&&(t=new Set,this._objectSpringBonesMap.set(e.bone,t)),t.add(e)}addSpringBone(e){console.warn("VRMLookAt: addSpringBone() is deprecated. use addJoint() instead."),this.addJoint(e)}deleteJoint(e){this._joints.delete(e);this._objectSpringBonesMap.get(e.bone).delete(e)}deleteSpringBone(e){console.warn("VRMLookAt: deleteSpringBone() is deprecated. use deleteJoint() instead."),this.deleteJoint(e)}setInitState(){const e=new Set,t=new Set,r=new Set;for(const i of this._joints)this._processSpringBone(i,e,t,r,(e=>e.setInitState()))}reset(){const e=new Set,t=new Set,r=new Set;for(const i of this._joints)this._processSpringBone(i,e,t,r,(e=>e.reset()))}update(e){const t=new Set,r=new Set,i=new Set;for(const n of this._joints)this._processSpringBone(n,t,r,i,(t=>t.update(e))),Vt(n.bone,(e=>{var t,r;return(null!==(r=null===(t=this._objectSpringBonesMap.get(e))||void 0===t?void 0:t.size)&&void 0!==r?r:0)>0||(e.updateWorldMatrix(!1,!1),!1)}))}_processSpringBone(e,t,r,i,n){if(r.has(e))return;if(t.has(e))throw new Error("VRMSpringBoneManager: Circular dependency detected while updating springbones");t.add(e);const o=this._getDependencies(e);for(const e of o)Ut(e,(e=>{const o=this._objectSpringBonesMap.get(e);if(o)for(const e of o)this._processSpringBone(e,t,r,i,n);else i.has(e)||(e.updateWorldMatrix(!1,!1),i.add(e))}));e.bone.updateMatrix(),e.bone.updateWorldMatrix(!1,!1),n(e),i.add(e.bone),r.add(e)}_getDependencies(e){const t=new Set,r=e.bone.parent;return r&&t.add(r),e.colliderGroups.forEach((e=>{e.colliders.forEach((e=>{t.add(e)}))})),t}}class Ct{constructor(e,t){this.parser=e,this.jointHelperRoot=null==t?void 0:t.jointHelperRoot,this.colliderHelperRoot=null==t?void 0:t.colliderHelperRoot}get name(){return Ct.EXTENSION_NAME}afterRoot(e){return It(this,void 0,void 0,(function*(){e.userData.vrmSpringBoneManager=yield this._import(e)}))}_import(e){return It(this,void 0,void 0,(function*(){const t=yield this._v1Import(e);if(null!=t)return t;const r=yield this._v0Import(e);return null!=r?r:null}))}_v1Import(e){var t,r,n,o,s;return It(this,void 0,void 0,(function*(){const a=e.parser.json;if(!(-1!==(null===(t=a.extensionsUsed)||void 0===t?void 0:t.indexOf(Ct.EXTENSION_NAME))))return null;const l=new Ot,u=yield e.parser.getDependencies("node"),d=null===(r=a.extensions)||void 0===r?void 0:r[Ct.EXTENSION_NAME];if(!d)return null;if("1.0-beta"!==d.specVersion)return null;const h=null===(n=d.colliders)||void 0===n?void 0:n.map(((e,t)=>{var r,n,o,s,a;const l=u[e.node],d=e.shape;if(d.sphere)return this._importSphereCollider(l,{offset:(new i.Vector3).fromArray(null!==(r=d.sphere.offset)&&void 0!==r?r:[0,0,0]),radius:null!==(n=d.sphere.radius)&&void 0!==n?n:0});if(d.capsule)return this._importCapsuleCollider(l,{offset:(new i.Vector3).fromArray(null!==(o=d.capsule.offset)&&void 0!==o?o:[0,0,0]),radius:null!==(s=d.capsule.radius)&&void 0!==s?s:0,tail:(new i.Vector3).fromArray(null!==(a=d.capsule.tail)&&void 0!==a?a:[0,0,0])});throw new Error(`VRMSpringBoneLoaderPlugin: The collider #${t} has no valid shape`)})),c=null===(o=d.colliderGroups)||void 0===o?void 0:o.map(((e,t)=>{var r;return{colliders:(null!==(r=e.colliders)&&void 0!==r?r:[]).map((e=>{const r=null==h?void 0:h[e];if(null==r)throw new Error(`VRMSpringBoneLoaderPlugin: The colliderGroup #${t} attempted to use a collider #${e} but not found`);return r})),name:e.name}}));return null===(s=d.springs)||void 0===s||s.forEach(((e,t)=>{var r;const n=e.joints,o=null===(r=e.colliderGroups)||void 0===r?void 0:r.map((e=>{const r=null==c?void 0:c[e];if(null==r)throw new Error(`VRMSpringBoneLoaderPlugin: The spring #${t} attempted to use a colliderGroup ${e} but not found`);return r})),s=null!=e.center?u[e.center]:void 0;let a;n.forEach((e=>{if(a){const t=a.node,r=u[t],n=e.node,d=u[n],h={hitRadius:a.hitRadius,dragForce:a.dragForce,gravityPower:a.gravityPower,stiffness:a.stiffness,gravityDir:null!=a.gravityDir?(new i.Vector3).fromArray(a.gravityDir):void 0},c=this._importJoint(r,d,h,o);s&&(c.center=s),l.addJoint(c)}a=e}))})),l.setInitState(),l}))}_v0Import(e){var t,r,n;return It(this,void 0,void 0,(function*(){const o=e.parser.json;if(!(-1!==(null===(t=o.extensionsUsed)||void 0===t?void 0:t.indexOf("VRM"))))return null;const s=null===(r=o.extensions)||void 0===r?void 0:r.VRM,a=null==s?void 0:s.secondaryAnimation;if(!a)return null;const l=null==a?void 0:a.boneGroups;if(!l)return null;const u=new Ot,d=yield e.parser.getDependencies("node"),h=null===(n=a.colliderGroups)||void 0===n?void 0:n.map((e=>{var t;const r=d[e.node];return{colliders:(null!==(t=e.colliders)&&void 0!==t?t:[]).map(((e,t)=>{var n,o,s;const a=new i.Vector3(0,0,0);return e.offset&&a.set(null!==(n=e.offset.x)&&void 0!==n?n:0,null!==(o=e.offset.y)&&void 0!==o?o:0,e.offset.z?-e.offset.z:0),this._importSphereCollider(r,{offset:a,radius:null!==(s=e.radius)&&void 0!==s?s:0})}))}}));return null==l||l.forEach(((e,t)=>{const r=e.bones;r&&r.forEach((r=>{var n,o,s,a;const l=d[r],c=new i.Vector3;e.gravityDir?c.set(null!==(n=e.gravityDir.x)&&void 0!==n?n:0,null!==(o=e.gravityDir.y)&&void 0!==o?o:0,null!==(s=e.gravityDir.z)&&void 0!==s?s:0):c.set(0,-1,0);const p=null!=e.center?d[e.center]:void 0,m={hitRadius:e.hitRadius,dragForce:e.dragForce,gravityPower:e.gravityPower,stiffness:e.stiffiness,gravityDir:c},f=null===(a=e.colliderGroups)||void 0===a?void 0:a.map((e=>{const r=null==h?void 0:h[e];if(null==r)throw new Error(`VRMSpringBoneLoaderPlugin: The spring #${t} attempted to use a colliderGroup ${e} but not found`);return r}));l.traverse((e=>{var t;const r=null!==(t=e.children[0])&&void 0!==t?t:null,i=this._importJoint(e,r,m,f);p&&(i.center=p),u.addJoint(i)}))}))})),e.scene.updateMatrixWorld(),u.setInitState(),u}))}_importJoint(e,t,r,i){const n=new bt(e,t,r,i);if(this.jointHelperRoot){const e=new ft(n);this.jointHelperRoot.add(e),e.renderOrder=this.jointHelperRoot.renderOrder}return n}_importSphereCollider(e,t){const{offset:r,radius:i}=t,n=new ut({offset:r,radius:i}),o=new gt(n);if(e.add(o),this.colliderHelperRoot){const e=new pt(o);this.colliderHelperRoot.add(e),e.renderOrder=this.colliderHelperRoot.renderOrder}return o}_importCapsuleCollider(e,t){const{offset:r,radius:i,tail:n}=t,o=new lt({offset:r,radius:i,tail:n}),s=new gt(o);if(e.add(s),this.colliderHelperRoot){const e=new pt(s);this.colliderHelperRoot.add(e),e.renderOrder=this.colliderHelperRoot.renderOrder}return s}}Ct.EXTENSION_NAME="VRMC_springBone";function Nt(e){if(Object.values(e).forEach((e=>{if(null==e?void 0:e.isTexture){e.dispose()}})),e.isShaderMaterial){const t=e.uniforms;t&&Object.values(t).forEach((e=>{const t=e.value;if(null==t?void 0:t.isTexture){t.dispose()}}))}e.dispose()}function Dt(e){const t=e.geometry;t&&t.dispose();const r=e.skeleton;r&&r.dispose();const i=e.material;i&&(Array.isArray(i)?i.forEach((e=>Nt(e))):i&&Nt(i))}class Ft{constructor(){}}Ft.deepDispose=function(e){e.traverse(Dt)},Ft.removeUnnecessaryJoints=function(e){const t=new Map;e.traverse((e=>{if("SkinnedMesh"!==e.type)return;const r=e,n=r.geometry.getAttribute("skinIndex");let o=t.get(n);if(!o){const e=[],s=[],a={},l=n.array;for(let t=0;t<l.length;t++){const i=l[t];void 0===a[i]&&(a[i]=e.length,e.push(r.skeleton.bones[i]),s.push(r.skeleton.boneInverses[i])),l[t]=a[i]}n.copyArray(l),n.needsUpdate=!0,o=new i.Skeleton(e,s),t.set(n,o)}r.bind(o,new i.Matrix4)}))},Ft.removeUnnecessaryVertices=function(e){const r=new Map;e.traverse((e=>{var n,o,s,a;if(!e.isMesh)return;const l=e,u=l.geometry,d=u.index;if(null==d)return;const h=r.get(u);if(null!=h)return void(l.geometry=h);const c=new i.BufferGeometry;c.name=u.name,c.morphTargetsRelative=u.morphTargetsRelative,u.groups.forEach((e=>{c.addGroup(e.start,e.count,e.materialIndex)})),c.boundingBox=null!==(o=null===(n=u.boundingBox)||void 0===n?void 0:n.clone())&&void 0!==o?o:null,c.boundingSphere=null!==(a=null===(s=u.boundingSphere)||void 0===s?void 0:s.clone())&&void 0!==a?a:null,c.setDrawRange(u.drawRange.start,u.drawRange.count),c.userData=u.userData,r.set(u,c);const p=[],m=[];{const e=d.array,r=new e.constructor(e.length);let i=0;for(let t=0;t<e.length;t++){const n=e[t];let o=p[n];null==o&&(p[n]=i,m[i]=n,o=i,i++),r[t]=o}c.setIndex(new t.BufferAttribute(r,1,!1))}Object.keys(u.attributes).forEach((e=>{const r=u.attributes[e];if(r.isInterleavedBufferAttribute)throw new Error("removeUnnecessaryVertices: InterleavedBufferAttribute is not supported");const i=r.array,{itemSize:n,normalized:o}=r,s=new i.constructor(m.length*n);m.forEach(((e,t)=>{for(let r=0;r<n;r++)s[t*n+r]=i[e*n+r]})),c.setAttribute(e,new t.BufferAttribute(s,n,o))}));let f=!0;Object.keys(u.morphAttributes).forEach((e=>{c.morphAttributes[e]=[];const r=u.morphAttributes[e];for(let i=0;i<r.length;i++){const n=r[i];if(n.isInterleavedBufferAttribute)throw new Error("removeUnnecessaryVertices: InterleavedBufferAttribute is not supported");const o=n.array,{itemSize:s,normalized:a}=n,l=new o.constructor(m.length*s);m.forEach(((e,t)=>{for(let r=0;r<s;r++)l[t*s+r]=o[e*s+r]})),f=f&&l.every((e=>0===e)),c.morphAttributes[e][i]=new t.BufferAttribute(l,s,a)}})),f&&(c.morphAttributes={}),l.geometry=c})),Array.from(r.keys()).forEach((e=>{e.dispose()}))},Ft.rotateVRM0=function(e){var t;"0"===(null===(t=e.meta)||void 0===t?void 0:t.metaVersion)&&(e.scene.rotation.y=Math.PI)},e.MToonMaterial=Pe,e.MToonMaterialDebugMode=Re,e.MToonMaterialLoaderPlugin=Se,e.MToonMaterialOutlineWidthMode=Te,e.VRM=Me,e.VRMAimConstraint=Ye,e.VRMCore=_e,e.VRMCoreLoaderPlugin=class{constructor(e,t){var r,i,n,o,s;this.parser=e;const a=null==t?void 0:t.helperRoot,l=null==t?void 0:t.autoUpdateHumanBones;this.expressionPlugin=null!==(r=null==t?void 0:t.expressionPlugin)&&void 0!==r?r:new x(e),this.firstPersonPlugin=null!==(i=null==t?void 0:t.firstPersonPlugin)&&void 0!==i?i:new R(e),this.humanoidPlugin=null!==(n=null==t?void 0:t.humanoidPlugin)&&void 0!==n?n:new B(e,{helperRoot:a,autoUpdateHumanBones:l}),this.lookAtPlugin=null!==(o=null==t?void 0:t.lookAtPlugin)&&void 0!==o?o:new ge(e,{helperRoot:a}),this.metaPlugin=null!==(s=null==t?void 0:t.metaPlugin)&&void 0!==s?s:new ve(e)}get name(){return"VRMC_vrm"}afterRoot(e){return o(this,void 0,void 0,(function*(){yield this.metaPlugin.afterRoot(e),yield this.humanoidPlugin.afterRoot(e),yield this.expressionPlugin.afterRoot(e),yield this.lookAtPlugin.afterRoot(e),yield this.firstPersonPlugin.afterRoot(e);const t=e.userData.vrmMeta,r=e.userData.vrmHumanoid;if(t&&r){const i=new _e({scene:e.scene,expressionManager:e.userData.vrmExpressionManager,firstPerson:e.userData.vrmFirstPerson,humanoid:r,lookAt:e.userData.vrmLookAt,meta:t});e.userData.vrmCore=i}}))}},e.VRMExpression=n,e.VRMExpressionLoaderPlugin=x,e.VRMExpressionManager=c,e.VRMExpressionMaterialColorType=p,e.VRMExpressionOverrideType={None:"none",Block:"block",Blend:"blend"},e.VRMExpressionPresetName=d,e.VRMFirstPerson=y,e.VRMFirstPersonLoaderPlugin=R,e.VRMFirstPersonMeshAnnotationType={Auto:"auto",Both:"both",ThirdPersonOnly:"thirdPersonOnly",FirstPersonOnly:"firstPersonOnly"},e.VRMHumanBoneList=L,e.VRMHumanBoneName={Hips:"hips",Spine:"spine",Chest:"chest",UpperChest:"upperChest",Neck:"neck",Head:"head",LeftEye:"leftEye",RightEye:"rightEye",Jaw:"jaw",LeftUpperLeg:"leftUpperLeg",LeftLowerLeg:"leftLowerLeg",LeftFoot:"leftFoot",LeftToes:"leftToes",RightUpperLeg:"rightUpperLeg",RightLowerLeg:"rightLowerLeg",RightFoot:"rightFoot",RightToes:"rightToes",LeftShoulder:"leftShoulder",LeftUpperArm:"leftUpperArm",LeftLowerArm:"leftLowerArm",LeftHand:"leftHand",RightShoulder:"rightShoulder",RightUpperArm:"rightUpperArm",RightLowerArm:"rightLowerArm",RightHand:"rightHand",LeftThumbMetacarpal:"leftThumbMetacarpal",LeftThumbProximal:"leftThumbProximal",LeftThumbDistal:"leftThumbDistal",LeftIndexProximal:"leftIndexProximal",LeftIndexIntermediate:"leftIndexIntermediate",LeftIndexDistal:"leftIndexDistal",LeftMiddleProximal:"leftMiddleProximal",LeftMiddleIntermediate:"leftMiddleIntermediate",LeftMiddleDistal:"leftMiddleDistal",LeftRingProximal:"leftRingProximal",LeftRingIntermediate:"leftRingIntermediate",LeftRingDistal:"leftRingDistal",LeftLittleProximal:"leftLittleProximal",LeftLittleIntermediate:"leftLittleIntermediate",LeftLittleDistal:"leftLittleDistal",RightThumbMetacarpal:"rightThumbMetacarpal",RightThumbProximal:"rightThumbProximal",RightThumbDistal:"rightThumbDistal",RightIndexProximal:"rightIndexProximal",RightIndexIntermediate:"rightIndexIntermediate",RightIndexDistal:"rightIndexDistal",RightMiddleProximal:"rightMiddleProximal",RightMiddleIntermediate:"rightMiddleIntermediate",RightMiddleDistal:"rightMiddleDistal",RightRingProximal:"rightRingProximal",RightRingIntermediate:"rightRingIntermediate",RightRingDistal:"rightRingDistal",RightLittleProximal:"rightLittleProximal",RightLittleIntermediate:"rightLittleIntermediate",RightLittleDistal:"rightLittleDistal"},e.VRMHumanBoneParentMap=S,e.VRMHumanoid=N,e.VRMHumanoidHelper=P,e.VRMHumanoidLoaderPlugin=B,e.VRMLoaderPlugin=class{constructor(e,t){var r,i,n,o,s,a,l,u,d,h;this.parser=e;const c=null==t?void 0:t.helperRoot,p=null==t?void 0:t.autoUpdateHumanBones;this.expressionPlugin=null!==(r=null==t?void 0:t.expressionPlugin)&&void 0!==r?r:new x(e),this.firstPersonPlugin=null!==(i=null==t?void 0:t.firstPersonPlugin)&&void 0!==i?i:new R(e),this.humanoidPlugin=null!==(n=null==t?void 0:t.humanoidPlugin)&&void 0!==n?n:new B(e,{helperRoot:c,autoUpdateHumanBones:p}),this.lookAtPlugin=null!==(o=null==t?void 0:t.lookAtPlugin)&&void 0!==o?o:new ge(e,{helperRoot:c}),this.metaPlugin=null!==(s=null==t?void 0:t.metaPlugin)&&void 0!==s?s:new ve(e),this.mtoonMaterialPlugin=null!==(a=null==t?void 0:t.mtoonMaterialPlugin)&&void 0!==a?a:new Se(e),this.materialsHDREmissiveMultiplierPlugin=null!==(l=null==t?void 0:t.materialsHDREmissiveMultiplierPlugin)&&void 0!==l?l:new be(e),this.materialsV0CompatPlugin=null!==(u=null==t?void 0:t.materialsV0CompatPlugin)&&void 0!==u?u:new Ve(e),this.springBonePlugin=null!==(d=null==t?void 0:t.springBonePlugin)&&void 0!==d?d:new Ct(e,{colliderHelperRoot:c,jointHelperRoot:c}),this.nodeConstraintPlugin=null!==(h=null==t?void 0:t.nodeConstraintPlugin)&&void 0!==h?h:new nt(e,{helperRoot:c})}get name(){return"VRMLoaderPlugin"}beforeRoot(){return xe(this,void 0,void 0,(function*(){yield this.materialsV0CompatPlugin.beforeRoot(),yield this.mtoonMaterialPlugin.beforeRoot()}))}loadMesh(e){return xe(this,void 0,void 0,(function*(){return yield this.mtoonMaterialPlugin.loadMesh(e)}))}getMaterialType(e){const t=this.mtoonMaterialPlugin.getMaterialType(e);return null!=t?t:null}extendMaterialParams(e,t){return xe(this,void 0,void 0,(function*(){yield this.materialsHDREmissiveMultiplierPlugin.extendMaterialParams(e,t),yield this.mtoonMaterialPlugin.extendMaterialParams(e,t)}))}afterRoot(e){return xe(this,void 0,void 0,(function*(){yield this.metaPlugin.afterRoot(e),yield this.humanoidPlugin.afterRoot(e),yield this.expressionPlugin.afterRoot(e),yield this.lookAtPlugin.afterRoot(e),yield this.firstPersonPlugin.afterRoot(e),yield this.springBonePlugin.afterRoot(e),yield this.nodeConstraintPlugin.afterRoot(e),yield this.mtoonMaterialPlugin.afterRoot(e);const t=e.userData.vrmMeta,r=e.userData.vrmHumanoid;if(t&&r){const i=new Me({scene:e.scene,expressionManager:e.userData.vrmExpressionManager,firstPerson:e.userData.vrmFirstPerson,humanoid:r,lookAt:e.userData.vrmLookAt,meta:t,materials:e.userData.vrmMToonMaterials,springBoneManager:e.userData.vrmSpringBoneManager,nodeConstraintManager:e.userData.vrmNodeConstraintManager});e.userData.vrm=i}}))}},e.VRMLookAt=le,e.VRMLookAtBoneApplier=pe,e.VRMLookAtExpressionApplier=me,e.VRMLookAtHelper=q,e.VRMLookAtLoaderPlugin=ge,e.VRMLookAtRangeMap=fe,e.VRMLookAtTypeName={Bone:"bone",Expression:"expression"},e.VRMMetaLoaderPlugin=ve,e.VRMNodeConstraint=He,e.VRMNodeConstraintHelper=Ce,e.VRMNodeConstraintLoaderPlugin=nt,e.VRMNodeConstraintManager=$e,e.VRMRequiredHumanBoneName=D,e.VRMRollConstraint=it,e.VRMRotationConstraint=Ke,e.VRMSpringBoneCollider=gt,e.VRMSpringBoneColliderHelper=pt,e.VRMSpringBoneColliderShape=ot,e.VRMSpringBoneColliderShapeCapsule=lt,e.VRMSpringBoneColliderShapeSphere=ut,e.VRMSpringBoneJoint=bt,e.VRMSpringBoneJointHelper=ft,e.VRMSpringBoneLoaderPlugin=Ct,e.VRMSpringBoneManager=Ot,e.VRMUtils=Ft,Object.defineProperty(e,"__esModule",{value:!0}),Object.assign(t,e)}));
